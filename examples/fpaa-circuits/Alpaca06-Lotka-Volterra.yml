#
# Copyright (c) 2020 anabrid GmbH
# Contact: https://www.anabrid.com/licensing/
#
# This file is part of the examples of the PyAnalog toolkit.
#
# ANABRID_BEGIN_LICENSE:GPL
# Commercial License Usage
# Licensees holding valid commercial anabrid licenses may use this file in
# accordance with the commercial license agreement provided with the
# Software or, alternatively, in accordance with the terms contained in
# a written agreement between you and Anabrid GmbH. For licensing terms
# and conditions see https://www.anabrid.com/licensing. For further
# information use the contact form at https://www.anabrid.com/contact.
# 
# GNU General Public License Usage
# Alternatively, this file may be used under the terms of the GNU 
# General Public License version 3 as published by the Free Software
# Foundation and appearing in the file LICENSE.GPL3 included in the
# packaging of this file. Please review the following information to
# ensure the GNU General Public License version 3 requirements
# will be met: https://www.gnu.org/licenses/gpl-3.0.html.
# For Germany, additional rules exist. Please consult /LICENSE.DE
# for further agreements.
# ANABRID_END_LICENSE
#

title: Lotka-Volterra (Zombies, Alpaca6)

description: |
  This system implements the Lotka-Voltera system

    h' = alpha h - beta h z
    z' = delta h z - gamma h z - xi z

  with initial conditions z0 and h0.
  
  In Alpaca6 ("Zombie Apocalypse"), the integrator time constant
  is k0=10^3, all integrators have weight 10, IC-time short,
  OP-time is 60ms.
  
  In this code here, summers and integrators have weight 10.
  (Internal negating summers always have weight 1)
  
coefficients:
  h0: 0.6
  z0: 0.6
  alpha: 0.365
  beta: 0.95
  delta: 0.84
  gamma: 0.44
  xi: 0.09

program:
  I1:
    type: INT2pm # pos only for convenient output
    input:
      a0: alpha
      a: {I1: pos}
      b0: beta
      b: {M: pos}
      ic: h0
      icSign: True # +1
  I2:
    type: INT2pm
    input:
      a0: xi
      a: {I2: neg}
      b0: 0.1
      b: {S: pos}
      ic: z0
      icSign: True # +1
  M:
    type: MUL2pm
    input: [alpha, I1: pos, 1, I2: pos]
  S:
    type: SUM2pm
    input: [delta, M: pos, gamma, M: neg]

observables:
  h: {I1: pos}
  z: {I2: pos}
