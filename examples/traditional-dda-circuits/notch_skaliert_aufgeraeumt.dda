#
# Copyright (c) 2020 anabrid GmbH
# Contact: https://www.anabrid.com/licensing/
#
# This file is part of the examples of the PyAnalog toolkit.
#
# ANABRID_BEGIN_LICENSE:GPL
# Commercial License Usage
# Licensees holding valid commercial anabrid licenses may use this file in
# accordance with the commercial license agreement provided with the
# Software or, alternatively, in accordance with the terms contained in
# a written agreement between you and Anabrid GmbH. For licensing terms
# and conditions see https://www.anabrid.com/licensing. For further
# information use the contact form at https://www.anabrid.com/contact.
# 
# GNU General Public License Usage
# Alternatively, this file may be used under the terms of the GNU 
# General Public License version 3 as published by the Free Software
# Foundation and appearing in the file LICENSE.GPL3 included in the
# packaging of this file. Please review the following information to
# ensure the GNU General Public License version 3 requirements
# will be met: https://www.gnu.org/licenses/gpl-3.0.html.
# ANABRID_END_LICENSE
#

#  Scaled biochemistry example: Scale factors (just a proof of concept):
#
#   \lambda_{c_n}=100
#   \lambda_{c_r}=
#   \lambda_{c_d}=100
#   \lambda_{c_nr}=100
#   \lambda_{c_rd}=100
#   \lambda_{c_nrd}=10^4


dt = const(.01)
kp1 = const(.5)
km1 = const(.5)
kp2 = const(.5)
km2 = const(.5)
kp3 = const(.5)
km3 = const(.5)
kubi = const(.5)

cn_ic = const(.85)
cr_ic = const(1)
cd_ic = const(1)

alpha_minus = mult(kp1, mult(cn_minus, cr))
alpha       = neg(alpha_minus)

beta        = mult(km1, cnr)
beta_minus   = neg(beta)

gamma_minus = mult(kp2, mult(cnr, cd_minus))
gamma       = neg(gamma_minus)                                

delta        = mult(km2, cnrd)
delta_minus = neg(delta)

epsilon_minus = mult(kp3, mult(cd_minus, cr))
epsilon       = neg(epsilon_minus)

zeta        = mult(km3, crd)
zeta_minus = neg(zeta)

eta_minus  = mult(kubi, cnr_minus)

cn = neg(cn_minus)
cr       = neg(cr_minus)
cd       = neg(cd_minus)
cnr       = neg(cnr_minus)
crd       = neg(crd_minus)
cnrd       = neg(cnrd_minus)

cn_minus = int(alpha_minus, beta, dt, cn_ic)
cr_minus = int(mult(.01, alpha_minus), mult(.01, epsilon_minus), mult(.01, beta), mult(.01, zeta), dt, cr_ic)
cd_minus = int(mult(.01, gamma_minus), epsilon_minus, mult(.01, delta), zeta, dt, cd_ic)
cnr_minus = int(alpha, mult(.01, gamma_minus), eta_minus, mult(.01, delta), beta_minus, dt, 0)
crd_minus = int(zeta_minus, epsilon, dt, 0)
cnrd_minus = int(delta_minus, gamma, dt, 0)
