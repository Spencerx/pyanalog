#
# Copyright (c) 2020 anabrid GmbH
# Contact: https://www.anabrid.com/licensing/
#
# This file is part of the examples of the PyAnalog toolkit.
#
# ANABRID_BEGIN_LICENSE:GPL
# Commercial License Usage
# Licensees holding valid commercial anabrid licenses may use this file in
# accordance with the commercial license agreement provided with the
# Software or, alternatively, in accordance with the terms contained in
# a written agreement between you and Anabrid GmbH. For licensing terms
# and conditions see https://www.anabrid.com/licensing. For further
# information use the contact form at https://www.anabrid.com/contact.
# 
# GNU General Public License Usage
# Alternatively, this file may be used under the terms of the GNU 
# General Public License version 3 as published by the Free Software
# Foundation and appearing in the file LICENSE.GPL3 included in the
# packaging of this file. Please review the following information to
# ensure the GNU General Public License version 3 requirements
# will be met: https://www.gnu.org/licenses/gpl-3.0.html.
# For Germany, additional rules exist. Please consult /LICENSE.DE
# for further agreements.
# ANABRID_END_LICENSE
#

# Double pendulum example, see section 6.25 in Bernds new book (ap2.pdf).
#
# The two degrees of freedom, phi_1 and phi_2 (abbreveated to p1 and p2 here)
# are measured in radians (0 to 2*pi).

g = const(1.)

# initial values for dot{phi_i}
initial_dp1 = const(0)
initial_dp2 = const(0)

# initial values for phi_i
initial_p1 = const(1.57)
initial_p2 = const(3.14159)

# dt timestep: kind of worthless information in a DDA file...
dt = const(0.0003)

diff = sum(p1, neg(p2))
cosd = cos(diff)
sind = sin(diff)

dp1_squared = mult(mdp1, mdp1)
dp2_squared = mult(mdp2, mdp2)

ddp1 = mult(0.5, sum(mult(ddp2, cosd), mult(dp2_squared,      sind), mult(sum(g,g),  sin(p1))))
ddp2 =           sum(mult(ddp1, cosd), mult(neg(dp1_squared), sind), mult(g,         sin(p2)))

mdp1 = int(ddp1, dt, initial_dp1)
mdp2 = int(ddp2, dt, initial_dp2)

p1 = int(mdp1, dt, initial_p1)
p2 = int(mdp2, dt, initial_p2)
