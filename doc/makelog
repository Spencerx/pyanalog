Sphinx v3.1.2 in Verwendung
[app] setting up extension: 'sphinx.addnodes'
[app] adding node: (<class 'sphinx.addnodes.toctree'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.toctree'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_signature'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_signature'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_signature_line'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_signature_line'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_addname'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_addname'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_type'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_type'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_returns'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_returns'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_name'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_name'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_parameterlist'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_parameterlist'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_parameter'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_parameter'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_optional'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_optional'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_annotation'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_annotation'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_content'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_content'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_sig_name'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_sig_name'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_sig_operator'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_sig_operator'>, {}
[app] adding node: (<class 'sphinx.addnodes.desc_sig_punctuation'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.desc_sig_punctuation'>, {}
[app] adding node: (<class 'sphinx.addnodes.versionmodified'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.versionmodified'>, {}
[app] adding node: (<class 'sphinx.addnodes.seealso'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.seealso'>, {}
[app] adding node: (<class 'sphinx.addnodes.productionlist'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.productionlist'>, {}
[app] adding node: (<class 'sphinx.addnodes.production'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.production'>, {}
[app] adding node: (<class 'sphinx.addnodes.index'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.index'>, {}
[app] adding node: (<class 'sphinx.addnodes.centered'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.centered'>, {}
[app] adding node: (<class 'sphinx.addnodes.acks'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.acks'>, {}
[app] adding node: (<class 'sphinx.addnodes.hlist'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.hlist'>, {}
[app] adding node: (<class 'sphinx.addnodes.hlistcol'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.hlistcol'>, {}
[app] adding node: (<class 'sphinx.addnodes.compact_paragraph'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.compact_paragraph'>, {}
[app] adding node: (<class 'sphinx.addnodes.glossary'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.glossary'>, {}
[app] adding node: (<class 'sphinx.addnodes.only'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.only'>, {}
[app] adding node: (<class 'sphinx.addnodes.start_of_file'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.start_of_file'>, {}
[app] adding node: (<class 'sphinx.addnodes.highlightlang'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.highlightlang'>, {}
[app] adding node: (<class 'sphinx.addnodes.tabular_col_spec'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.tabular_col_spec'>, {}
[app] adding node: (<class 'sphinx.addnodes.meta'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.meta'>, {}
[app] adding node: (<class 'sphinx.addnodes.pending_xref'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.pending_xref'>, {}
[app] adding node: (<class 'sphinx.addnodes.number_reference'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.number_reference'>, {}
[app] adding node: (<class 'sphinx.addnodes.download_reference'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.download_reference'>, {}
[app] adding node: (<class 'sphinx.addnodes.literal_emphasis'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.literal_emphasis'>, {}
[app] adding node: (<class 'sphinx.addnodes.literal_strong'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.literal_strong'>, {}
[app] adding node: (<class 'sphinx.addnodes.manpage'>, {})
[app] adding translation_handlers: <class 'sphinx.addnodes.manpage'>, {}
[app] setting up extension: 'sphinx.builders.changes'
[app] adding builder: <class 'sphinx.builders.changes.ChangesBuilder'>
[app] setting up extension: 'sphinx.builders.epub3'
[app] adding builder: <class 'sphinx.builders.epub3.Epub3Builder'>
[app] adding config value: ('epub_basename', <function setup.<locals>.<lambda> at 0x7f2acbd17ca0>, None)
[app] adding config value: ('epub_version', 3.0, 'epub')
[app] adding config value: ('epub_theme', 'epub', 'epub')
[app] adding config value: ('epub_theme_options', {}, 'epub')
[app] adding config value: ('epub_title', <function setup.<locals>.<lambda> at 0x7f2acbd17a60>, 'epub')
[app] adding config value: ('epub_author', <function setup.<locals>.<lambda> at 0x7f2acbd179d0>, 'epub')
[app] adding config value: ('epub_language', <function setup.<locals>.<lambda> at 0x7f2acbd17c10>, 'epub')
[app] adding config value: ('epub_publisher', <function setup.<locals>.<lambda> at 0x7f2acbb43940>, 'epub')
[app] adding config value: ('epub_copyright', <function setup.<locals>.<lambda> at 0x7f2acbb439d0>, 'epub')
[app] adding config value: ('epub_identifier', 'unknown', 'epub')
[app] adding config value: ('epub_scheme', 'unknown', 'epub')
[app] adding config value: ('epub_uid', 'unknown', 'env')
[app] adding config value: ('epub_cover', (), 'env')
[app] adding config value: ('epub_guide', (), 'env')
[app] adding config value: ('epub_pre_files', [], 'env')
[app] adding config value: ('epub_post_files', [], 'env')
[app] adding config value: ('epub_css_files', <function setup.<locals>.<lambda> at 0x7f2acbb43a60>, 'epub')
[app] adding config value: ('epub_exclude_files', [], 'env')
[app] adding config value: ('epub_tocdepth', 3, 'env')
[app] adding config value: ('epub_tocdup', True, 'env')
[app] adding config value: ('epub_tocscope', 'default', 'env')
[app] adding config value: ('epub_fix_images', False, 'env')
[app] adding config value: ('epub_max_image_width', 0, 'env')
[app] adding config value: ('epub_show_urls', 'inline', 'epub')
[app] adding config value: ('epub_use_index', <function setup.<locals>.<lambda> at 0x7f2acbb43af0>, 'epub')
[app] adding config value: ('epub_description', 'unknown', 'epub')
[app] adding config value: ('epub_contributor', 'unknown', 'epub')
[app] adding config value: ('epub_writing_mode', 'horizontal', 'epub', <sphinx.config.ENUM object at 0x7f2acbd300d0>)
[app] connecting event 'config-inited' (800): <function convert_epub_css_files at 0x7f2acbb43820> [id=0]
[app] connecting event 'builder-inited' (500): <function validate_config_values at 0x7f2acbd39430> [id=1]
[app] setting up extension: 'sphinx.builders.dirhtml'
[app] setting up extension: 'sphinx.builders.html'
[app] adding builder: <class 'sphinx.builders.html.StandaloneHTMLBuilder'>
[app] adding config value: ('html_theme', 'alabaster', 'html')
[app] adding config value: ('html_theme_path', [], 'html')
[app] adding config value: ('html_theme_options', {}, 'html')
[app] adding config value: ('html_title', <function setup.<locals>.<lambda> at 0x7f2acbb43b80>, 'html', [<class 'str'>])
[app] adding config value: ('html_short_title', <function setup.<locals>.<lambda> at 0x7f2acbb43c10>, 'html')
[app] adding config value: ('html_style', None, 'html', [<class 'str'>])
[app] adding config value: ('html_logo', None, 'html', [<class 'str'>])
[app] adding config value: ('html_favicon', None, 'html', [<class 'str'>])
[app] adding config value: ('html_css_files', [], 'html')
[app] adding config value: ('html_js_files', [], 'html')
[app] adding config value: ('html_static_path', [], 'html')
[app] adding config value: ('html_extra_path', [], 'html')
[app] adding config value: ('html_last_updated_fmt', None, 'html', [<class 'str'>])
[app] adding config value: ('html_sidebars', {}, 'html')
[app] adding config value: ('html_additional_pages', {}, 'html')
[app] adding config value: ('html_domain_indices', True, 'html', [<class 'list'>])
[app] adding config value: ('html_add_permalinks', 'Â¶', 'html')
[app] adding config value: ('html_use_index', True, 'html')
[app] adding config value: ('html_split_index', False, 'html')
[app] adding config value: ('html_copy_source', True, 'html')
[app] adding config value: ('html_show_sourcelink', True, 'html')
[app] adding config value: ('html_sourcelink_suffix', '.txt', 'html')
[app] adding config value: ('html_use_opensearch', '', 'html')
[app] adding config value: ('html_file_suffix', None, 'html', [<class 'str'>])
[app] adding config value: ('html_link_suffix', None, 'html', [<class 'str'>])
[app] adding config value: ('html_show_copyright', True, 'html')
[app] adding config value: ('html_show_sphinx', True, 'html')
[app] adding config value: ('html_context', {}, 'html')
[app] adding config value: ('html_output_encoding', 'utf-8', 'html')
[app] adding config value: ('html_compact_lists', True, 'html')
[app] adding config value: ('html_secnumber_suffix', '. ', 'html')
[app] adding config value: ('html_search_language', None, 'html', [<class 'str'>])
[app] adding config value: ('html_search_options', {}, 'html')
[app] adding config value: ('html_search_scorer', '', None)
[app] adding config value: ('html_scaled_image_link', True, 'html')
[app] adding config value: ('html_baseurl', '', 'html')
[app] adding config value: ('html_math_renderer', None, 'env')
[app] adding config value: ('html4_writer', False, 'html')
[app] connecting event 'config-inited' (800): <function convert_html_css_files at 0x7f2acbb87d30> [id=2]
[app] connecting event 'config-inited' (800): <function convert_html_js_files at 0x7f2acbb31b80> [id=3]
[app] connecting event 'config-inited' (800): <function validate_html_extra_path at 0x7f2acbb31d30> [id=4]
[app] connecting event 'config-inited' (800): <function validate_html_static_path at 0x7f2acbb31dc0> [id=5]
[app] connecting event 'config-inited' (800): <function validate_html_logo at 0x7f2acbb31e50> [id=6]
[app] connecting event 'config-inited' (800): <function validate_html_favicon at 0x7f2acbb31ee0> [id=7]
[app] connecting event 'builder-inited' (500): <function validate_math_renderer at 0x7f2acbb31ca0> [id=8]
[app] connecting event 'html-page-context' (500): <function setup_js_tag_helper at 0x7f2acbb31c10> [id=9]
[app] setting up extension: 'sphinx.ext.mathjax'
[app] adding html_math_renderer: mathjax, (<function html_visit_math at 0x7f2acbb43ca0>, None), (<function html_visit_displaymath at 0x7f2acbb43f70>, None)
[app] adding config value: ('mathjax_path', 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS-MML_HTMLorMML', 'html')
[app] adding config value: ('mathjax_options', {}, 'html')
[app] adding config value: ('mathjax_inline', ['\\(', '\\)'], 'html')
[app] adding config value: ('mathjax_display', ['\\[', '\\]'], 'html')
[app] adding config value: ('mathjax_config', None, 'html')
[app] connecting event 'env-updated' (500): <function install_mathjax at 0x7f2acbb4d040> [id=10]
[app] setting up extension: 'sphinx.builders.html.transforms'
[app] adding post transform: <class 'sphinx.builders.html.transforms.KeyboardTransform'>
[app] adding builder: <class 'sphinx.builders.dirhtml.DirectoryHTMLBuilder'>
[app] setting up extension: 'sphinx.builders.dummy'
[app] adding builder: <class 'sphinx.builders.dummy.DummyBuilder'>
[app] setting up extension: 'sphinx.builders.gettext'
[app] adding builder: <class 'sphinx.builders.gettext.MessageCatalogBuilder'>
[app] adding config value: ('gettext_compact', True, 'gettext')
[app] adding config value: ('gettext_location', True, 'gettext')
[app] adding config value: ('gettext_uuid', False, 'gettext')
[app] adding config value: ('gettext_auto_build', True, 'env')
[app] adding config value: ('gettext_additional_targets', [], 'env')
[app] adding config value: ('gettext_last_translator', 'FULL NAME <EMAIL@ADDRESS>', 'gettext')
[app] adding config value: ('gettext_language_team', 'LANGUAGE <LL@li.org>', 'gettext')
[app] setting up extension: 'sphinx.builders.html'
[app] setting up extension: 'sphinx.builders.latex'
[app] setting up extension: 'sphinx.builders.latex.transforms'
[app] adding transform: <class 'sphinx.builders.latex.transforms.FootnoteDocnameUpdater'>
[app] adding post transform: <class 'sphinx.builders.latex.transforms.BibliographyTransform'>
[app] adding post transform: <class 'sphinx.builders.latex.transforms.CitationReferenceTransform'>
[app] adding post transform: <class 'sphinx.builders.latex.transforms.DocumentTargetTransform'>
[app] adding post transform: <class 'sphinx.builders.latex.transforms.IndexInSectionTitleTransform'>
[app] adding post transform: <class 'sphinx.builders.latex.transforms.LaTeXFootnoteTransform'>
[app] adding post transform: <class 'sphinx.builders.latex.transforms.LiteralBlockTransform'>
[app] adding post transform: <class 'sphinx.builders.latex.transforms.MathReferenceTransform'>
[app] adding post transform: <class 'sphinx.builders.latex.transforms.ShowUrlsTransform'>
[app] adding builder: <class 'sphinx.builders.latex.LaTeXBuilder'>
[app] connecting event 'config-inited' (800): <function validate_config_values at 0x7f2acb9dd160> [id=11]
[app] connecting event 'config-inited' (800): <function validate_latex_theme_options at 0x7f2acb9dd1f0> [id=12]
[app] connecting event 'builder-inited' (500): <function install_pakcages_for_ja at 0x7f2acb9dd280> [id=13]
[app] adding config value: ('latex_engine', <function default_latex_engine at 0x7f2acb9dd310>, None, <sphinx.config.ENUM object at 0x7f2acbad6220>)
[app] adding config value: ('latex_documents', <function default_latex_documents at 0x7f2acb9dd4c0>, None)
[app] adding config value: ('latex_logo', None, None, [<class 'str'>])
[app] adding config value: ('latex_appendices', [], None)
[app] adding config value: ('latex_use_latex_multicolumn', False, None)
[app] adding config value: ('latex_use_xindy', <function default_latex_use_xindy at 0x7f2acb9dd430>, None, [<class 'bool'>])
[app] adding config value: ('latex_toplevel_sectioning', None, None, <sphinx.config.ENUM object at 0x7f2acbb44640>)
[app] adding config value: ('latex_domain_indices', True, None, [<class 'list'>])
[app] adding config value: ('latex_show_urls', 'no', None)
[app] adding config value: ('latex_show_pagerefs', False, None)
[app] adding config value: ('latex_elements', {}, None)
[app] adding config value: ('latex_additional_files', [], None)
[app] adding config value: ('latex_theme', 'manual', None, [<class 'str'>])
[app] adding config value: ('latex_theme_options', {}, None)
[app] adding config value: ('latex_theme_path', [], None, [<class 'list'>])
[app] adding config value: ('latex_docclass', <function default_latex_docclass at 0x7f2acb9dd3a0>, None)
[app] setting up extension: 'sphinx.builders.linkcheck'
[app] adding builder: <class 'sphinx.builders.linkcheck.CheckExternalLinksBuilder'>
[app] adding config value: ('linkcheck_ignore', [], None)
[app] adding config value: ('linkcheck_auth', [], None)
[app] adding config value: ('linkcheck_request_headers', {}, None)
[app] adding config value: ('linkcheck_retries', 1, None)
[app] adding config value: ('linkcheck_timeout', None, None, [<class 'int'>])
[app] adding config value: ('linkcheck_workers', 5, None)
[app] adding config value: ('linkcheck_anchors', True, None)
[app] adding config value: ('linkcheck_anchors_ignore', ['^!'], None)
[app] setting up extension: 'sphinx.builders.manpage'
[app] adding builder: <class 'sphinx.builders.manpage.ManualPageBuilder'>
[app] adding config value: ('man_pages', <function default_man_pages at 0x7f2acb80d790>, None)
[app] adding config value: ('man_show_urls', False, None)
[app] setting up extension: 'sphinx.builders.singlehtml'
[app] setting up extension: 'sphinx.builders.html'
[app] adding builder: <class 'sphinx.builders.singlehtml.SingleFileHTMLBuilder'>
[app] adding config value: ('singlehtml_sidebars', <function setup.<locals>.<lambda> at 0x7f2acb7c3310>, 'html')
[app] setting up extension: 'sphinx.builders.texinfo'
[app] adding builder: <class 'sphinx.builders.texinfo.TexinfoBuilder'>
[app] adding config value: ('texinfo_documents', <function default_texinfo_documents at 0x7f2acb7c34c0>, None)
[app] adding config value: ('texinfo_appendices', [], None)
[app] adding config value: ('texinfo_elements', {}, None)
[app] adding config value: ('texinfo_domain_indices', True, None, [<class 'list'>])
[app] adding config value: ('texinfo_show_urls', 'footnote', None)
[app] adding config value: ('texinfo_no_detailmenu', False, None)
[app] setting up extension: 'sphinx.builders.text'
[app] adding builder: <class 'sphinx.builders.text.TextBuilder'>
[app] adding config value: ('text_sectionchars', '*=-~"+`', 'env')
[app] adding config value: ('text_newlines', 'unix', 'env')
[app] adding config value: ('text_add_secnumbers', True, 'env')
[app] adding config value: ('text_secnumber_suffix', '. ', 'env')
[app] setting up extension: 'sphinx.builders.xml'
[app] adding builder: <class 'sphinx.builders.xml.XMLBuilder'>
[app] adding builder: <class 'sphinx.builders.xml.PseudoXMLBuilder'>
[app] adding config value: ('xml_pretty', True, 'env')
[app] setting up extension: 'sphinx.config'
[app] connecting event 'config-inited' (800): <function convert_source_suffix at 0x7f2acd079e50> [id=14]
[app] connecting event 'config-inited' (800): <function init_numfig_format at 0x7f2acd079ee0> [id=15]
[app] connecting event 'config-inited' (800): <function correct_copyright_year at 0x7f2acd079f70> [id=16]
[app] connecting event 'config-inited' (800): <function check_confval_types at 0x7f2acd07e040> [id=17]
[app] connecting event 'config-inited' (800): <function check_primary_domain at 0x7f2acd07e160> [id=18]
[app] connecting event 'env-get-outdated' (500): <function check_master_doc at 0x7f2acd07e1f0> [id=19]
[app] setting up extension: 'sphinx.domains.c'
[app] adding domain: <class 'sphinx.domains.c.CDomain'>
[app] adding config value: ('c_id_attributes', [], 'env')
[app] adding config value: ('c_paren_attributes', [], 'env')
[app] setting up extension: 'sphinx.domains.changeset'
[app] adding domain: <class 'sphinx.domains.changeset.ChangeSetDomain'>
[app] adding directive: ('deprecated', <class 'sphinx.domains.changeset.VersionChange'>)
[app] adding directive: ('versionadded', <class 'sphinx.domains.changeset.VersionChange'>)
[app] adding directive: ('versionchanged', <class 'sphinx.domains.changeset.VersionChange'>)
[app] setting up extension: 'sphinx.domains.citation'
[app] adding domain: <class 'sphinx.domains.citation.CitationDomain'>
[app] adding transform: <class 'sphinx.domains.citation.CitationDefinitionTransform'>
[app] adding transform: <class 'sphinx.domains.citation.CitationReferenceTransform'>
[app] setting up extension: 'sphinx.domains.cpp'
[app] adding domain: <class 'sphinx.domains.cpp.CPPDomain'>
[app] adding config value: ('cpp_index_common_prefix', [], 'env')
[app] adding config value: ('cpp_id_attributes', [], 'env')
[app] adding config value: ('cpp_paren_attributes', [], 'env')
[app] adding post transform: <class 'sphinx.domains.cpp.AliasTransform'>
[app] adding config value: ('cpp_debug_lookup', False, '')
[app] adding config value: ('cpp_debug_show_tree', False, '')
[app] connecting event 'builder-inited' (500): <function setup.<locals>.setDebugFlags at 0x7f2acb6fe040> [id=20]
[app] setting up extension: 'sphinx.domains.index'
[app] adding domain: <class 'sphinx.domains.index.IndexDomain'>
[app] adding directive: ('index', <class 'sphinx.domains.index.IndexDirective'>)
[app] adding role: ('index', <sphinx.domains.index.IndexRole object at 0x7f2acb7afbb0>)
[app] setting up extension: 'sphinx.domains.javascript'
[app] adding domain: <class 'sphinx.domains.javascript.JavaScriptDomain'>
[app] setting up extension: 'sphinx.domains.math'
[app] adding domain: <class 'sphinx.domains.math.MathDomain'>
[app] adding role: ('eq', <sphinx.domains.math.MathReferenceRole object at 0x7f2acb659b80>)
[app] setting up extension: 'sphinx.domains.python'
[app] setting up extension: 'sphinx.directives'
[app] adding config value: ('strip_signature_backslash', False, 'env')
[app] adding event: 'object-description-transform'
[app] adding domain: <class 'sphinx.domains.python.PythonDomain'>
[app] connecting event 'object-description-transform' (500): <function filter_meta_fields at 0x7f2acba9f940> [id=21]
[app] connecting event 'missing-reference' (900): <function builtin_resolver at 0x7f2acbaa8550> [id=22]
[app] setting up extension: 'sphinx.domains.rst'
[app] adding domain: <class 'sphinx.domains.rst.ReSTDomain'>
[app] setting up extension: 'sphinx.domains.std'
[app] adding domain: <class 'sphinx.domains.std.StandardDomain'>
[app] setting up extension: 'sphinx.directives'
[app] setting up extension: 'sphinx.directives.code'
[app] setting up extension: 'sphinx.directives.other'
[app] setting up extension: 'sphinx.directives.patches'
[app] setting up extension: 'sphinx.extension'
[app] connecting event 'config-inited' (800): <function verify_needs_extensions at 0x7f2acd039ee0> [id=23]
[app] setting up extension: 'sphinx.parsers'
[app] adding search source_parser: <class 'sphinx.parsers.RSTParser'>
[app] setting up extension: 'sphinx.registry'
[app] connecting event 'config-inited' (800): <function merge_source_suffix at 0x7f2acdc5b3a0> [id=24]
[app] setting up extension: 'sphinx.roles'
[app] setting up extension: 'sphinx.transforms'
[app] adding transform: <class 'sphinx.transforms.ApplySourceWorkaround'>
[app] adding transform: <class 'sphinx.transforms.ExtraTranslatableNodes'>
[app] adding transform: <class 'sphinx.transforms.DefaultSubstitutions'>
[app] adding transform: <class 'sphinx.transforms.MoveModuleTargets'>
[app] adding transform: <class 'sphinx.transforms.HandleCodeBlocks'>
[app] adding transform: <class 'sphinx.transforms.SortIds'>
[app] adding transform: <class 'sphinx.transforms.DoctestTransform'>
[app] adding transform: <class 'sphinx.transforms.FigureAligner'>
[app] adding transform: <class 'sphinx.transforms.AutoNumbering'>
[app] adding transform: <class 'sphinx.transforms.AutoIndexUpgrader'>
[app] adding transform: <class 'sphinx.transforms.FilterSystemMessages'>
[app] adding transform: <class 'sphinx.transforms.UnreferencedFootnotesDetector'>
[app] adding transform: <class 'sphinx.transforms.SphinxSmartQuotes'>
[app] adding transform: <class 'sphinx.transforms.DoctreeReadEvent'>
[app] adding transform: <class 'sphinx.transforms.ManpageLink'>
[app] setting up extension: 'sphinx.transforms.compact_bullet_list'
[app] adding transform: <class 'sphinx.transforms.compact_bullet_list.RefOnlyBulletListTransform'>
[app] setting up extension: 'sphinx.transforms.i18n'
[app] adding transform: <class 'sphinx.transforms.i18n.PreserveTranslatableMessages'>
[app] adding transform: <class 'sphinx.transforms.i18n.Locale'>
[app] adding transform: <class 'sphinx.transforms.i18n.RemoveTranslatableInline'>
[app] setting up extension: 'sphinx.transforms.references'
[app] adding transform: <class 'sphinx.transforms.references.SubstitutionDefinitionsRemover'>
[app] adding transform: <class 'sphinx.transforms.references.SphinxDanglingReferences'>
[app] adding transform: <class 'sphinx.transforms.references.SphinxDomains'>
[app] setting up extension: 'sphinx.transforms.post_transforms'
[app] adding post transform: <class 'sphinx.transforms.post_transforms.ReferencesResolver'>
[app] adding post transform: <class 'sphinx.transforms.post_transforms.OnlyNodeTransform'>
[app] adding post transform: <class 'sphinx.transforms.post_transforms.SigElementFallbackTransform'>
[app] setting up extension: 'sphinx.transforms.post_transforms.code'
[app] adding post transform: <class 'sphinx.transforms.post_transforms.code.HighlightLanguageTransform'>
[app] adding post transform: <class 'sphinx.transforms.post_transforms.code.TrimDoctestFlagsTransform'>
[app] setting up extension: 'sphinx.transforms.post_transforms.images'
[app] adding post transform: <class 'sphinx.transforms.post_transforms.images.ImageDownloader'>
[app] adding post transform: <class 'sphinx.transforms.post_transforms.images.DataURIExtractor'>
[app] setting up extension: 'sphinx.util.compat'
[app] adding transform: <class 'sphinx.util.compat.IndexEntriesMigrator'>
[app] connecting event 'builder-inited' (500): <function register_application_for_autosummary at 0x7f2acbb43dc0> [id=25]
[app] setting up extension: 'sphinx.versioning'
[app] adding transform: <class 'sphinx.versioning.UIDTransform'>
[app] setting up extension: 'sphinx.environment.collectors.dependencies'
[app] adding environment collector: <class 'sphinx.environment.collectors.dependencies.DependenciesCollector'>
[app] connecting event 'doctree-read' (500): <bound method DependenciesCollector.process_doc of <sphinx.environment.collectors.dependencies.DependenciesCollector object at 0x7f2acb5b4820>> [id=26]
[app] connecting event 'env-merge-info' (500): <bound method DependenciesCollector.merge_other of <sphinx.environment.collectors.dependencies.DependenciesCollector object at 0x7f2acb5b4820>> [id=27]
[app] connecting event 'env-purge-doc' (500): <bound method DependenciesCollector.clear_doc of <sphinx.environment.collectors.dependencies.DependenciesCollector object at 0x7f2acb5b4820>> [id=28]
[app] connecting event 'env-get-updated' (500): <bound method EnvironmentCollector.get_updated_docs of <sphinx.environment.collectors.dependencies.DependenciesCollector object at 0x7f2acb5b4820>> [id=29]
[app] connecting event 'env-get-outdated' (500): <bound method EnvironmentCollector.get_outdated_docs of <sphinx.environment.collectors.dependencies.DependenciesCollector object at 0x7f2acb5b4820>> [id=30]
[app] setting up extension: 'sphinx.environment.collectors.asset'
[app] adding environment collector: <class 'sphinx.environment.collectors.asset.ImageCollector'>
[app] connecting event 'doctree-read' (500): <bound method ImageCollector.process_doc of <sphinx.environment.collectors.asset.ImageCollector object at 0x7f2acb417670>> [id=31]
[app] connecting event 'env-merge-info' (500): <bound method ImageCollector.merge_other of <sphinx.environment.collectors.asset.ImageCollector object at 0x7f2acb417670>> [id=32]
[app] connecting event 'env-purge-doc' (500): <bound method ImageCollector.clear_doc of <sphinx.environment.collectors.asset.ImageCollector object at 0x7f2acb417670>> [id=33]
[app] connecting event 'env-get-updated' (500): <bound method EnvironmentCollector.get_updated_docs of <sphinx.environment.collectors.asset.ImageCollector object at 0x7f2acb417670>> [id=34]
[app] connecting event 'env-get-outdated' (500): <bound method EnvironmentCollector.get_outdated_docs of <sphinx.environment.collectors.asset.ImageCollector object at 0x7f2acb417670>> [id=35]
[app] adding environment collector: <class 'sphinx.environment.collectors.asset.DownloadFileCollector'>
[app] connecting event 'doctree-read' (500): <bound method DownloadFileCollector.process_doc of <sphinx.environment.collectors.asset.DownloadFileCollector object at 0x7f2acb417970>> [id=36]
[app] connecting event 'env-merge-info' (500): <bound method DownloadFileCollector.merge_other of <sphinx.environment.collectors.asset.DownloadFileCollector object at 0x7f2acb417970>> [id=37]
[app] connecting event 'env-purge-doc' (500): <bound method DownloadFileCollector.clear_doc of <sphinx.environment.collectors.asset.DownloadFileCollector object at 0x7f2acb417970>> [id=38]
[app] connecting event 'env-get-updated' (500): <bound method EnvironmentCollector.get_updated_docs of <sphinx.environment.collectors.asset.DownloadFileCollector object at 0x7f2acb417970>> [id=39]
[app] connecting event 'env-get-outdated' (500): <bound method EnvironmentCollector.get_outdated_docs of <sphinx.environment.collectors.asset.DownloadFileCollector object at 0x7f2acb417970>> [id=40]
[app] setting up extension: 'sphinx.environment.collectors.metadata'
[app] adding environment collector: <class 'sphinx.environment.collectors.metadata.MetadataCollector'>
[app] connecting event 'doctree-read' (500): <bound method MetadataCollector.process_doc of <sphinx.environment.collectors.metadata.MetadataCollector object at 0x7f2acb417e80>> [id=41]
[app] connecting event 'env-merge-info' (500): <bound method MetadataCollector.merge_other of <sphinx.environment.collectors.metadata.MetadataCollector object at 0x7f2acb417e80>> [id=42]
[app] connecting event 'env-purge-doc' (500): <bound method MetadataCollector.clear_doc of <sphinx.environment.collectors.metadata.MetadataCollector object at 0x7f2acb417e80>> [id=43]
[app] connecting event 'env-get-updated' (500): <bound method EnvironmentCollector.get_updated_docs of <sphinx.environment.collectors.metadata.MetadataCollector object at 0x7f2acb417e80>> [id=44]
[app] connecting event 'env-get-outdated' (500): <bound method EnvironmentCollector.get_outdated_docs of <sphinx.environment.collectors.metadata.MetadataCollector object at 0x7f2acb417e80>> [id=45]
[app] setting up extension: 'sphinx.environment.collectors.title'
[app] adding environment collector: <class 'sphinx.environment.collectors.title.TitleCollector'>
[app] connecting event 'doctree-read' (500): <bound method TitleCollector.process_doc of <sphinx.environment.collectors.title.TitleCollector object at 0x7f2acb417f40>> [id=46]
[app] connecting event 'env-merge-info' (500): <bound method TitleCollector.merge_other of <sphinx.environment.collectors.title.TitleCollector object at 0x7f2acb417f40>> [id=47]
[app] connecting event 'env-purge-doc' (500): <bound method TitleCollector.clear_doc of <sphinx.environment.collectors.title.TitleCollector object at 0x7f2acb417f40>> [id=48]
[app] connecting event 'env-get-updated' (500): <bound method EnvironmentCollector.get_updated_docs of <sphinx.environment.collectors.title.TitleCollector object at 0x7f2acb417f40>> [id=49]
[app] connecting event 'env-get-outdated' (500): <bound method EnvironmentCollector.get_outdated_docs of <sphinx.environment.collectors.title.TitleCollector object at 0x7f2acb417f40>> [id=50]
[app] setting up extension: 'sphinx.environment.collectors.toctree'
[app] adding environment collector: <class 'sphinx.environment.collectors.toctree.TocTreeCollector'>
[app] connecting event 'doctree-read' (500): <bound method TocTreeCollector.process_doc of <sphinx.environment.collectors.toctree.TocTreeCollector object at 0x7f2acb420190>> [id=51]
[app] connecting event 'env-merge-info' (500): <bound method TocTreeCollector.merge_other of <sphinx.environment.collectors.toctree.TocTreeCollector object at 0x7f2acb420190>> [id=52]
[app] connecting event 'env-purge-doc' (500): <bound method TocTreeCollector.clear_doc of <sphinx.environment.collectors.toctree.TocTreeCollector object at 0x7f2acb420190>> [id=53]
[app] connecting event 'env-get-updated' (500): <bound method TocTreeCollector.get_updated_docs of <sphinx.environment.collectors.toctree.TocTreeCollector object at 0x7f2acb420190>> [id=54]
[app] connecting event 'env-get-outdated' (500): <bound method EnvironmentCollector.get_outdated_docs of <sphinx.environment.collectors.toctree.TocTreeCollector object at 0x7f2acb420190>> [id=55]
[app] setting up extension: 'sphinxcontrib.applehelp'
[app] setting up extension: 'sphinx.builders.html'
[app] adding builder: <class 'sphinxcontrib.applehelp.AppleHelpBuilder'>
[app] adding config value: ('applehelp_bundle_name', <function setup.<locals>.<lambda> at 0x7f2acb5c00d0>, 'applehelp')
[app] adding config value: ('applehelp_bundle_id', None, 'applehelp', [<class 'str'>])
[app] adding config value: ('applehelp_dev_region', 'en-us', 'applehelp')
[app] adding config value: ('applehelp_bundle_version', '1', 'applehelp')
[app] adding config value: ('applehelp_icon', None, 'applehelp', [<class 'str'>])
[app] adding config value: ('applehelp_kb_product', <function setup.<locals>.<lambda> at 0x7f2acb435d30>, 'applehelp')
[app] adding config value: ('applehelp_kb_url', None, 'applehelp', [<class 'str'>])
[app] adding config value: ('applehelp_remote_url', None, 'applehelp', [<class 'str'>])
[app] adding config value: ('applehelp_index_anchors', False, 'applehelp', [<class 'str'>])
[app] adding config value: ('applehelp_min_term_length', None, 'applehelp', [<class 'str'>])
[app] adding config value: ('applehelp_stopwords', <function setup.<locals>.<lambda> at 0x7f2acb43e040>, 'applehelp')
[app] adding config value: ('applehelp_locale', <function setup.<locals>.<lambda> at 0x7f2acb43e0d0>, 'applehelp')
[app] adding config value: ('applehelp_title', <function setup.<locals>.<lambda> at 0x7f2acb435c10>, 'applehelp')
[app] adding config value: ('applehelp_codesign_identity', <function setup.<locals>.<lambda> at 0x7f2acb43e160>, 'applehelp')
[app] adding config value: ('applehelp_codesign_flags', <function setup.<locals>.<lambda> at 0x7f2acb43e1f0>, 'applehelp')
[app] adding config value: ('applehelp_indexer_path', '/usr/bin/hiutil', 'applehelp')
[app] adding config value: ('applehelp_codesign_path', '/usr/bin/codesign', 'applehelp')
[app] adding config value: ('applehelp_disable_external_tools', False, 'applehelp')
[app] setting up extension: 'sphinxcontrib.devhelp'
[app] setting up extension: 'sphinx.builders.html'
[app] adding builder: <class 'sphinxcontrib.devhelp.DevhelpBuilder'>
[app] adding config value: ('devhelp_basename', <function setup.<locals>.<lambda> at 0x7f2acb435f70>, 'devhelp')
[app] setting up extension: 'sphinxcontrib.htmlhelp'
[app] setting up extension: 'sphinx.builders.html'
[app] adding builder: <class 'sphinxcontrib.htmlhelp.HTMLHelpBuilder'>
[app] adding config value: ('htmlhelp_basename', <function default_htmlhelp_basename at 0x7f2acb3cd550>, '')
[app] adding config value: ('htmlhelp_file_suffix', None, 'html', [<class 'str'>])
[app] adding config value: ('htmlhelp_link_suffix', None, 'html', [<class 'str'>])
[app] setting up extension: 'sphinxcontrib.serializinghtml'
[app] setting up extension: 'sphinx.builders.html'
[app] adding builder: <class 'sphinxcontrib.serializinghtml.JSONHTMLBuilder'>
[app] adding builder: <class 'sphinxcontrib.serializinghtml.PickleHTMLBuilder'>
[app] setting up extension: 'sphinxcontrib.qthelp'
[app] setting up extension: 'sphinx.builders.html'
[app] adding builder: <class 'sphinxcontrib.qthelp.QtHelpBuilder'>
[app] adding config value: ('qthelp_basename', <function setup.<locals>.<lambda> at 0x7f2acb435dc0>, 'html')
[app] adding config value: ('qthelp_namespace', None, 'html', [<class 'str'>])
[app] adding config value: ('qthelp_theme', 'nonav', 'html')
[app] adding config value: ('qthelp_theme_options', {}, 'html')
[app] setting up extension: 'alabaster'
[app] adding HTML theme: 'alabaster', '/usr/lib/python3.8/site-packages/alabaster'
[app] connecting event 'html-page-context' (500): <function update_context at 0x7f2acb3e3310> [id=56]
[app] setting up extension: 'sphinx.ext.autodoc'
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.ModuleDocumenter'>
[app] adding directive: ('automodule', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.ClassDocumenter'>
[app] adding directive: ('autoclass', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.ExceptionDocumenter'>
[app] adding directive: ('autoexception', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.DataDocumenter'>
[app] adding directive: ('autodata', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.DataDeclarationDocumenter'>
[app] adding directive: ('autodatadecl', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.GenericAliasDocumenter'>
[app] adding directive: ('autogenericalias', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.TypeVarDocumenter'>
[app] adding directive: ('autotypevar', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.FunctionDocumenter'>
[app] adding directive: ('autofunction', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.DecoratorDocumenter'>
[app] adding directive: ('autodecorator', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.MethodDocumenter'>
[app] adding directive: ('automethod', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.AttributeDocumenter'>
[app] adding directive: ('autoattribute', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.PropertyDocumenter'>
[app] adding directive: ('autoproperty', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.InstanceAttributeDocumenter'>
[app] adding directive: ('autoinstanceattribute', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding autodocumenter: <class 'sphinx.ext.autodoc.SlotsAttributeDocumenter'>
[app] adding directive: ('autoslotsattribute', <class 'sphinx.ext.autodoc.directive.AutodocDirective'>)
[app] adding config value: ('autoclass_content', 'class', True, <sphinx.config.ENUM object at 0x7f2acb3d8250>)
[app] adding config value: ('autodoc_member_order', 'alphabetical', True, <sphinx.config.ENUM object at 0x7f2acb3d8970>)
[app] adding config value: ('autodoc_default_options', {}, True)
[app] adding config value: ('autodoc_docstring_signature', True, True)
[app] adding config value: ('autodoc_mock_imports', [], True)
[app] adding config value: ('autodoc_typehints', 'signature', True, <sphinx.config.ENUM object at 0x7f2acb3d8a60>)
[app] adding config value: ('autodoc_warningiserror', True, True)
[app] adding config value: ('autodoc_inherit_docstrings', True, True)
[app] adding event: 'autodoc-before-process-signature'
[app] adding event: 'autodoc-process-docstring'
[app] adding event: 'autodoc-process-signature'
[app] adding event: 'autodoc-skip-member'
[app] connecting event 'config-inited' (800): <function migrate_autodoc_member_order at 0x7f2acb3a1c10> [id=57]
[app] setting up extension: 'sphinx.ext.autodoc.type_comment'
[app] connecting event 'autodoc-before-process-signature' (500): <function update_annotations_using_type_comments at 0x7f2acb3a61f0> [id=58]
[app] setting up extension: 'sphinx.ext.autodoc.typehints'
[app] connecting event 'autodoc-process-signature' (500): <function record_typehints at 0x7f2acb3a63a0> [id=59]
[app] connecting event 'object-description-transform' (500): <function merge_typehints at 0x7f2acb3a6430> [id=60]
[app] setting up extension: 'sphinx.ext.viewcode'
[app] adding config value: ('viewcode_import', None, False)
[app] adding config value: ('viewcode_enable_epub', False, False)
[app] adding config value: ('viewcode_follow_imported_members', True, False)
[app] connecting event 'doctree-read' (500): <function doctree_read at 0x7f2acb3a6790> [id=61]
[app] connecting event 'env-merge-info' (500): <function env_merge_info at 0x7f2acb3a6820> [id=62]
[app] connecting event 'html-collect-pages' (500): <function collect_pages at 0x7f2acb3a6940> [id=63]
[app] connecting event 'missing-reference' (500): <function missing_reference at 0x7f2acb3a68b0> [id=64]
[app] adding event: 'viewcode-find-source'
[app] adding event: 'viewcode-follow-imported'
[app] setting up extension: 'sphinx.ext.autosummary'
[app] setting up extension: 'sphinx.ext.autodoc'
[app] adding node: (<class 'sphinx.ext.autosummary.autosummary_toc'>, {'html': (<function autosummary_toc_visit_html at 0x7f2acb3a6ee0>, <function autosummary_noop at 0x7f2acb3a6f70>), 'latex': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'text': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'man': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'texinfo': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>)})
[app] adding translation_handlers: <class 'sphinx.ext.autosummary.autosummary_toc'>, {'html': (<function autosummary_toc_visit_html at 0x7f2acb3a6ee0>, <function autosummary_noop at 0x7f2acb3a6f70>), 'latex': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'text': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'man': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'texinfo': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>)}
[app] adding node: (<class 'sphinx.ext.autosummary.autosummary_table'>, {'html': (<function autosummary_table_visit_html at 0x7f2acb3ba040>, <function autosummary_noop at 0x7f2acb3a6f70>), 'latex': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'text': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'man': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'texinfo': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>)})
[app] adding translation_handlers: <class 'sphinx.ext.autosummary.autosummary_table'>, {'html': (<function autosummary_table_visit_html at 0x7f2acb3ba040>, <function autosummary_noop at 0x7f2acb3a6f70>), 'latex': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'text': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'man': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>), 'texinfo': (<function autosummary_noop at 0x7f2acb3a6f70>, <function autosummary_noop at 0x7f2acb3a6f70>)}
[app] adding directive: ('autosummary', <class 'sphinx.ext.autosummary.Autosummary'>)
[app] adding role: ('autolink', <sphinx.ext.autosummary.AutoLink object at 0x7f2acb3a5670>)
[app] connecting event 'builder-inited' (500): <function process_generate_options at 0x7f2acb3bac10> [id=65]
[app] adding config value: ('autosummary_context', {}, True)
[app] adding config value: ('autosummary_generate', [], True, [<class 'bool'>])
[app] adding config value: ('autosummary_generate_overwrite', True, False)
[app] adding config value: ('autosummary_mock_imports', <function setup.<locals>.<lambda> at 0x7f2acb3badc0>, 'env')
[app] adding config value: ('autosummary_imported_members', [], False, [<class 'bool'>])
[app] setting up extension: 'sphinx.ext.mathjax'
making output directory... erledigt
[app] emitting event: 'config-inited'(<sphinx.config.Config object at 0x7f2acbd1ff10>,)
[app] emitting event: 'builder-inited'()
building [mo]: targets for 0 po files that are out of date
building [html]: targets for 14 source files that are out of date
updating environment: [app] emitting event: 'env-get-outdated'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, {'installation', 'cpp-codegen', 'co
[new config] 14 added, 0 changed, 0 removed
[app] emitting event: 'env-before-read-docs'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, ['ast', 'cas', 'code-testing', 'com
reading sources... [  7%] ast
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'ast')
[app] emitting event: 'source-read'('ast', ['.. _abstract-syntax-tree:\n\nAbstract Syntax tree\n====================\n\n.. automodule::
[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/ast.rst:6: input:
.. automodule:: dda.ast
   :members:


[autodoc] import dda.ast
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'dda.ast', <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>, 
[app] emitting event: 'autodoc-process-docstring'('module', 'dda.ast', <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>, 
[app] emitting event: 'autodoc-skip-member'('module', 'BreveState', <class 'dda.ast.BreveState'>, False, {'members': <object object at 0x7f2acb
[app] emitting event: 'autodoc-skip-member'('module', 'State', <class 'dda.ast.State'>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'Symbol', <class 'dda.ast.Symbol'>, False, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/dda/__pycache__/ast.cpython-38.pyc
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', "\nThe minimalistic pythonic standalone abstract syntax tree (**AST**)\nrepres
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py', True, {'members': <obje
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb3025b0>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'dda.ast', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'dda', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='dda.ast', loader=<_frozen_importlib_external.SourceFileLoade
[app] emitting event: 'autodoc-skip-member'('module', 'collections', <module 'collections' from '/usr/lib/python3.8/collections/__init__.py'>, 
[app] emitting event: 'autodoc-skip-member'('module', 'flatten', <function <lambda> at 0x7f2acb2cd1f0>, True, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('module', 'is_symbol', <function is_symbol at 0x7f2acb2cd310>, False, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'os', <module 'os' from '/usr/lib/python3.8/os.py'>, False, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'pprint', <module 'pprint' from '/usr/lib/python3.8/pprint.py'>, False, {'members': <obje
[app] emitting event: 'autodoc-skip-member'('module', 'symbols', <function symbols at 0x7f2acb2cda60>, False, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('module', 'sys', <module 'sys' (built-in)>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'topological_sort', <function topological_sort at 0x7f2acb2cdaf0>, False, {'members': <ob
[app] emitting event: 'autodoc-skip-member'('module', 'types', <module 'types' from '/usr/lib/python3.8/types.py'>, False, {'members': <object 
[app] emitting event: 'autodoc-skip-member'('module', 'unique', <function <lambda> at 0x7f2acb2cd280>, True, {'members': <object object at 0x7f
[autodoc] from dda.ast import Symbol
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[app] emitting event: 'autodoc-before-process-signature'(<function Symbol.__init__ at 0x7f2acb2cd3a0>, True)
[app] emitting event: 'autodoc-process-signature'('class', 'dda.ast.Symbol', <class 'dda.ast.Symbol'>, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-process-docstring'('class', 'dda.ast.Symbol', <class 'dda.ast.Symbol'>, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-skip-member'('class', '__call__', <function Symbol.__call__ at 0x7f2acb2cd430>, True, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', '__dict__', mappingproxy({'__module__': 'dda.ast', '__doc__': '\n    A symbol is similar t
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', '\n    A symbol is similar to a LISP atom which has a Head and a tail,\n    whe
[app] emitting event: 'autodoc-skip-member'('class', '__eq__', <function Symbol.__eq__ at 0x7f2acb2cd550>, True, {'members': <object object at 
[app] emitting event: 'autodoc-skip-member'('class', '__hash__', <function Symbol.__hash__ at 0x7f2acb2cd5e0>, True, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', '__init__', <function Symbol.__init__ at 0x7f2acb2cd3a0>, True, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'dda.ast', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__repr__', <function Symbol.__str__ at 0x7f2acb2cd4c0>, True, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('class', '__str__', <function Symbol.__str__ at 0x7f2acb2cd4c0>, True, {'members': <object object a
[app] emitting event: 'autodoc-skip-member'('class', '__unicode__', <function Symbol.__str__ at 0x7f2acb2cd4c0>, True, {'members': <object obje
[app] emitting event: 'autodoc-skip-member'('class', '__weakref__', <attribute '__weakref__' of 'Symbol' objects>, True, {'members': <object ob
[app] emitting event: 'autodoc-skip-member'('class', 'all_terms', <function Symbol.all_terms at 0x7f2acb2cd8b0>, False, {'members': <object obj
[app] emitting event: 'autodoc-skip-member'('class', 'all_variables', <function Symbol.all_variables at 0x7f2acb2cd820>, False, {'members': <ob
[app] emitting event: 'autodoc-skip-member'('class', 'is_term', <function Symbol.is_term at 0x7f2acb2cd700>, False, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('class', 'is_variable', <function Symbol.is_variable at 0x7f2acb2cd670>, False, {'members': <object
[app] emitting event: 'autodoc-skip-member'('class', 'map_heads', <function Symbol.map_heads at 0x7f2acb2cd940>, False, {'members': <object obj
[app] emitting event: 'autodoc-skip-member'('class', 'map_tails', <function Symbol.map_tails at 0x7f2acb2cd9d0>, False, {'members': <object obj
[app] emitting event: 'autodoc-skip-member'('class', 'variables', <function Symbol.variables at 0x7f2acb2cd790>, False, {'members': <object obj
[autodoc] from dda.ast import Symbol.is_variable
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] getattr(_, 'is_variable')
[autodoc] => <function Symbol.is_variable at 0x7f2acb2cd670>
[app] emitting event: 'autodoc-before-process-signature'(<function Symbol.is_variable at 0x7f2acb2cd670>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.Symbol.is_variable', <function Symbol.is_variable at 0x7f2acb2cd670>, {'members'
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.Symbol.is_variable', <function Symbol.is_variable at 0x7f2acb2cd670>, {'members'
[autodoc] from dda.ast import Symbol.is_term
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] getattr(_, 'is_term')
[autodoc] => <function Symbol.is_term at 0x7f2acb2cd700>
[app] emitting event: 'autodoc-before-process-signature'(<function Symbol.is_term at 0x7f2acb2cd700>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.Symbol.is_term', <function Symbol.is_term at 0x7f2acb2cd700>, {'members': <objec
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.Symbol.is_term', <function Symbol.is_term at 0x7f2acb2cd700>, {'members': <objec
[autodoc] from dda.ast import Symbol.variables
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] getattr(_, 'variables')
[autodoc] => <function Symbol.variables at 0x7f2acb2cd790>
[app] emitting event: 'autodoc-before-process-signature'(<function Symbol.variables at 0x7f2acb2cd790>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.Symbol.variables', <function Symbol.variables at 0x7f2acb2cd790>, {'members': <o
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.Symbol.variables', <function Symbol.variables at 0x7f2acb2cd790>, {'members': <o
[autodoc] from dda.ast import Symbol.all_variables
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] getattr(_, 'all_variables')
[autodoc] => <function Symbol.all_variables at 0x7f2acb2cd820>
[app] emitting event: 'autodoc-before-process-signature'(<function Symbol.all_variables at 0x7f2acb2cd820>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.Symbol.all_variables', <function Symbol.all_variables at 0x7f2acb2cd820>, {'memb
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.Symbol.all_variables', <function Symbol.all_variables at 0x7f2acb2cd820>, {'memb
[autodoc] from dda.ast import Symbol.all_terms
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] getattr(_, 'all_terms')
[autodoc] => <function Symbol.all_terms at 0x7f2acb2cd8b0>
[app] emitting event: 'autodoc-before-process-signature'(<function Symbol.all_terms at 0x7f2acb2cd8b0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.Symbol.all_terms', <function Symbol.all_terms at 0x7f2acb2cd8b0>, {'members': <o
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.Symbol.all_terms', <function Symbol.all_terms at 0x7f2acb2cd8b0>, {'members': <o
[autodoc] from dda.ast import Symbol.map_heads
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] getattr(_, 'map_heads')
[autodoc] => <function Symbol.map_heads at 0x7f2acb2cd940>
[app] emitting event: 'autodoc-before-process-signature'(<function Symbol.map_heads at 0x7f2acb2cd940>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.Symbol.map_heads', <function Symbol.map_heads at 0x7f2acb2cd940>, {'members': <o
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.Symbol.map_heads', <function Symbol.map_heads at 0x7f2acb2cd940>, {'members': <o
[autodoc] from dda.ast import Symbol.map_tails
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] getattr(_, 'map_tails')
[autodoc] => <function Symbol.map_tails at 0x7f2acb2cd9d0>
[app] emitting event: 'autodoc-before-process-signature'(<function Symbol.map_tails at 0x7f2acb2cd9d0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.Symbol.map_tails', <function Symbol.map_tails at 0x7f2acb2cd9d0>, {'members': <o
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.Symbol.map_tails', <function Symbol.map_tails at 0x7f2acb2cd9d0>, {'members': <o
[autodoc] from dda.ast import is_symbol
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'is_symbol')
[autodoc] => <function is_symbol at 0x7f2acb2cd310>
[app] emitting event: 'autodoc-before-process-signature'(<function is_symbol at 0x7f2acb2cd310>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.ast.is_symbol', <function is_symbol at 0x7f2acb2cd310>, {'members': <object object
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.ast.is_symbol', <function is_symbol at 0x7f2acb2cd310>, {'members': <object object
[autodoc] from dda.ast import symbols
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'symbols')
[autodoc] => <function symbols at 0x7f2acb2cda60>
[app] emitting event: 'autodoc-before-process-signature'(<function symbols at 0x7f2acb2cda60>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.ast.symbols', <function symbols at 0x7f2acb2cda60>, {'members': <object object at 
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.ast.symbols', <function symbols at 0x7f2acb2cda60>, {'members': <object object at 
[autodoc] from dda.ast import topological_sort
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'topological_sort')
[autodoc] => <function topological_sort at 0x7f2acb2cdaf0>
[app] emitting event: 'autodoc-before-process-signature'(<function topological_sort at 0x7f2acb2cdaf0>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.ast.topological_sort', <function topological_sort at 0x7f2acb2cdaf0>, {'members': 
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.ast.topological_sort', <function topological_sort at 0x7f2acb2cdaf0>, {'members': 
[autodoc] from dda.ast import State
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[app] emitting event: 'autodoc-before-process-signature'(<function State.__init__ at 0x7f2acb2cdc10>, True)
[app] emitting event: 'autodoc-process-signature'('class', 'dda.ast.State', <class 'dda.ast.State'>, {'members': <object object at 0x7f2acb769900>}, 
[app] emitting event: 'autodoc-process-docstring'('class', 'dda.ast.State', <class 'dda.ast.State'>, {'members': <object object at 0x7f2acb769900>}, 
[app] emitting event: 'autodoc-skip-member'('class', '__abstractmethods__', frozenset(), True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', '\n    A state is a dictionary which is by convention a mapping from variable\n
[app] emitting event: 'autodoc-skip-member'('class', '__getitem__', <function State.__getitem__ at 0x7f2acb2cdca0>, True, {'members': <object o
[app] emitting event: 'autodoc-skip-member'('class', '__init__', <function State.__init__ at 0x7f2acb2cdc10>, True, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'dda.ast', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__repr__', <function State.__repr__ at 0x7f2acb2cde50>, True, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('class', '__setitem__', <function State.__setitem__ at 0x7f2acb2cdd30>, True, {'members': <object o
[app] emitting event: 'autodoc-skip-member'('class', '_abc_impl', <_abc_data object at 0x7f2acb2d0cc0>, True, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('class', 'constant_validity', <function State.constant_validity at 0x7f2acb2d6160>, False, {'member
[app] emitting event: 'autodoc-skip-member'('class', 'dependency_graph', <function State.dependency_graph at 0x7f2acb2d61f0>, False, {'members'
[app] emitting event: 'autodoc-skip-member'('class', 'draw_dependency_graph', <function State.draw_dependency_graph at 0x7f2acb2d6280>, False, 
[app] emitting event: 'autodoc-skip-member'('class', 'equation_adder', <function State.equation_adder at 0x7f2acb2cdee0>, False, {'members': <o
[app] emitting event: 'autodoc-skip-member'('class', 'export', <function State.export at 0x7f2acb2d6430>, False, {'members': <object object at 
[app] emitting event: 'autodoc-skip-member'('class', 'map_heads', <function State.map_heads at 0x7f2acb2d6040>, False, {'members': <object obje
[app] emitting event: 'autodoc-skip-member'('class', 'map_tails', <function State.map_tails at 0x7f2acb2cdf70>, False, {'members': <object obje
[app] emitting event: 'autodoc-skip-member'('class', 'name_computing_elements', <function State.name_computing_elements at 0x7f2acb2d6310>, Fal
[app] emitting event: 'autodoc-skip-member'('class', 'symbols', <function State.symbols at 0x7f2acb2d60d0>, False, {'members': <object object a
[app] emitting event: 'autodoc-skip-member'('class', 'update', <function State.update at 0x7f2acb2cddc0>, False, {'members': <object object at 
[app] emitting event: 'autodoc-skip-member'('class', 'variable_ordering', <function State.variable_ordering at 0x7f2acb2d63a0>, False, {'member
[autodoc] from dda.ast import State.update
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'update')
[autodoc] => <function State.update at 0x7f2acb2cddc0>
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.update', <function State.update at 0x7f2acb2cddc0>, {'members': <object ob
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.update', <function State.update at 0x7f2acb2cddc0>, {'members': <object ob
[autodoc] from dda.ast import State.equation_adder
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'equation_adder')
[autodoc] => <function State.equation_adder at 0x7f2acb2cdee0>
[app] emitting event: 'autodoc-before-process-signature'(<function State.equation_adder at 0x7f2acb2cdee0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.equation_adder', <function State.equation_adder at 0x7f2acb2cdee0>, {'memb
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.equation_adder', <function State.equation_adder at 0x7f2acb2cdee0>, {'memb
[autodoc] from dda.ast import State.map_tails
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'map_tails')
[autodoc] => <function State.map_tails at 0x7f2acb2cdf70>
[app] emitting event: 'autodoc-before-process-signature'(<function State.map_tails at 0x7f2acb2cdf70>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.map_tails', <function State.map_tails at 0x7f2acb2cdf70>, {'members': <obj
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.map_tails', <function State.map_tails at 0x7f2acb2cdf70>, {'members': <obj
[autodoc] from dda.ast import State.map_heads
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'map_heads')
[autodoc] => <function State.map_heads at 0x7f2acb2d6040>
[app] emitting event: 'autodoc-before-process-signature'(<function State.map_heads at 0x7f2acb2d6040>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.map_heads', <function State.map_heads at 0x7f2acb2d6040>, {'members': <obj
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.map_heads', <function State.map_heads at 0x7f2acb2d6040>, {'members': <obj
[autodoc] from dda.ast import State.symbols
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'symbols')
[autodoc] => <function State.symbols at 0x7f2acb2d60d0>
[app] emitting event: 'autodoc-before-process-signature'(<function State.symbols at 0x7f2acb2d60d0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.symbols', <function State.symbols at 0x7f2acb2d60d0>, {'members': <object 
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.symbols', <function State.symbols at 0x7f2acb2d60d0>, {'members': <object 
[autodoc] from dda.ast import State.constant_validity
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'constant_validity')
[autodoc] => <function State.constant_validity at 0x7f2acb2d6160>
[app] emitting event: 'autodoc-before-process-signature'(<function State.constant_validity at 0x7f2acb2d6160>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.constant_validity', <function State.constant_validity at 0x7f2acb2d6160>, 
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.constant_validity', <function State.constant_validity at 0x7f2acb2d6160>, 
[autodoc] from dda.ast import State.dependency_graph
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'dependency_graph')
[autodoc] => <function State.dependency_graph at 0x7f2acb2d61f0>
[app] emitting event: 'autodoc-before-process-signature'(<function State.dependency_graph at 0x7f2acb2d61f0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.dependency_graph', <function State.dependency_graph at 0x7f2acb2d61f0>, {'
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.dependency_graph', <function State.dependency_graph at 0x7f2acb2d61f0>, {'
[autodoc] from dda.ast import State.draw_dependency_graph
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'draw_dependency_graph')
[autodoc] => <function State.draw_dependency_graph at 0x7f2acb2d6280>
[app] emitting event: 'autodoc-before-process-signature'(<function State.draw_dependency_graph at 0x7f2acb2d6280>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.draw_dependency_graph', <function State.draw_dependency_graph at 0x7f2acb2
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.draw_dependency_graph', <function State.draw_dependency_graph at 0x7f2acb2
[autodoc] from dda.ast import State.name_computing_elements
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'name_computing_elements')
[autodoc] => <function State.name_computing_elements at 0x7f2acb2d6310>
[app] emitting event: 'autodoc-before-process-signature'(<function State.name_computing_elements at 0x7f2acb2d6310>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.name_computing_elements', <function State.name_computing_elements at 0x7f2
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.name_computing_elements', <function State.name_computing_elements at 0x7f2
[autodoc] from dda.ast import State.variable_ordering
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'variable_ordering')
[autodoc] => <function State.variable_ordering at 0x7f2acb2d63a0>
[app] emitting event: 'autodoc-before-process-signature'(<function State.variable_ordering at 0x7f2acb2d63a0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.variable_ordering', <function State.variable_ordering at 0x7f2acb2d63a0>, 
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.variable_ordering', <function State.variable_ordering at 0x7f2acb2d63a0>, 
[autodoc] from dda.ast import State.export
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] getattr(_, 'export')
[autodoc] => <function State.export at 0x7f2acb2d6430>
[app] emitting event: 'autodoc-before-process-signature'(<function State.export at 0x7f2acb2d6430>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'dda.ast.State.export', <function State.export at 0x7f2acb2d6430>, {'members': <object ob
[app] emitting event: 'autodoc-process-docstring'('method', 'dda.ast.State.export', <function State.export at 0x7f2acb2d6430>, {'members': <object ob
[autodoc] from dda.ast import BreveState
[autodoc] import dda.ast => <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>
[autodoc] getattr(_, 'BreveState')
[autodoc] => <class 'dda.ast.BreveState'>
[app] emitting event: 'autodoc-before-process-signature'(<function State.__init__ at 0x7f2acb2cdc10>, True)
[app] emitting event: 'autodoc-process-signature'('class', 'dda.ast.BreveState', <class 'dda.ast.BreveState'>, {'members': <object object at 0x7f2acb
[app] emitting event: 'autodoc-process-docstring'('class', 'dda.ast.BreveState', <class 'dda.ast.BreveState'>, {'members': <object object at 0x7f2acb
[app] emitting event: 'autodoc-skip-member'('class', '__abstractmethods__', frozenset(), True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', '\n    This subclass of a state adds *syntactic sugar* by allowing attribute/me
[app] emitting event: 'autodoc-skip-member'('class', '__getattr__', <function BreveState.__getattr__ at 0x7f2acb2d6550>, True, {'members': <obj
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'dda.ast', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__setattr__', <function BreveState.__setattr__ at 0x7f2acb2d65e0>, True, {'members': <obj
[app] emitting event: 'autodoc-skip-member'('class', '_abc_impl', <_abc_data object at 0x7f2acb2d0d20>, True, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('class', 'isinternal', <function BreveState.<lambda> at 0x7f2acb2d64c0>, True, {'members': <object 
[app] emitting event: 'autodoc-skip-member'('class', 'wellknown', ('data', 'type_peacemaking', 'default_symbol'), True, {'members': <object obj
[autodoc] output:

.. py:module:: dda.ast

The minimalistic pythonic standalone abstract syntax tree (**AST**)
representation in this module is the heart of the PyDDA package.
The code has no external dependencies, especially it does not rely
on a Computer Algebra System or even on SymPy.

The :class:`Symbol` object represents a node in a AST and the edges
to it's children. In order to simplify mass symbol generation,
:meth:`symbols` can be used.

The :class:`State` object represents a list (set) of equations.
It basically maps variables to their expressions. The :class:`State`
represents a (traditional) DDA file. From a python perspective, a
:class:`State` is not much more then a dictionary on stereoids.


.. py:class:: Symbol(head, *tail)
   :module: dda.ast

   A symbol is similar to a LISP atom which has a Head and a tail,
   where tail is a list. Common notations for such a type are

   * ``head[tail]`` in Mathematica,
   * ``(head, tail)`` in Lisp
   * ``head(tail)`` in C-like languages like Python, Perl, Fortran, C
   * Actually ``[head, *tail]`` in Python, but we don't use that.

   A symbol also represents a vertex (node) and it's childs in an ordered tree.
   Think of head being the vertex and tail the (edge) list of children.
   We use the Symbol class to represent the abstract syntax tree (AST)
   of the DDA language for describing ODEs and circuitery.

   When you call ``str()`` or similar on instances of this class, it will
   print its representation in the C-like notation. This notation is
   identical to the "classical" DDA language.

   There are two types of Symbols: **Variables** have no tail, they just
   consist of a head:

   >>> x = Symbol("x")
   >>> print(x)
   x
   >>> x.head
   'x'
   >>> x.tail
   ()

   In contrast, **Terms** have a tail:

   >>> f = Symbol("f", Symbol("x"), Symbol("y"))
   >>> print(f)
   f(x, y)
   >>> f.head
   'f'
   >>> f.tail
   (x, y)

   Variables can be used to create complex expressions for which
   they then serve for as a head:

   >>> f,x,y,z = Symbol("f"), Symbol("x"), Symbol("y"), Symbol("z")
   >>> f(x,y)
   f(x, y)
   >>> # example for kind of nonsensical terms:
   >>> x(x,f,x)
   x(x, f, x)

   Calling a symbol will always replace it's tail:

   >>> f(x)(y)
   f(y)

   Symbols are equal to each other if their head and tail equals:

   >>> a1, a2 = Symbol("a"), Symbol("a")
   >>> a1 == a2
   True
   >>> f(x) == f(x)
   True
   >>> f(x) == f(x,x)
   False

   Symbols can be used as dictionary keys, since they hash trivially
   due to their unique canonical (pythonic) string interpretation.

   .. note::

      In order to avoid confusion between Python Strings and Symbols,
      you should

      - *always* use strings as Symbol heads but
      - *never* use strings in Symbol tails. Instead, use there Symbols
        only.

      Think of Symbol implementing the following type (hint):
      ``Tuple[str, List[Symbol]]``.

      In the above example, you can write

      >>> f = Symbol("f", "x", "y")
      >>> print(f)
      f(x, y)

      which looks identical to the example given before. This is
      *by intention* and breaks Python standard for ``repr()``
      behaviour. It can be hard to find such errors. That could probably
      be improved by providing the correct ``repr()``.

      It is a good convention to *only* have Symbols and floats/integers
      being part of the AST.




   .. py:method:: Symbol.is_variable()
      :module: dda.ast

      A variable is a symbol without a tail.


   .. py:method:: Symbol.is_term()
      :module: dda.ast

      A term is a symbol with a tail.


   .. py:method:: Symbol.variables()
      :module: dda.ast

      Compute the direct dependencies of this symbol, i.e. other variables
      directly occuring in the tail.


   .. py:method:: Symbol.all_variables()
      :module: dda.ast

      Like :meth:variables, but also find variables in all children.


   .. py:method:: Symbol.all_terms()
      :module: dda.ast

      Like :meth:all_variables, but for terms: Returns a list of all terms in all children of this node.


   .. py:method:: Symbol.map_heads(mapping)
      :module: dda.ast

      Call a mapping function on all heads in all (nested) subexpressions.
      Returns a new mapped Symbol. This routine is suitable for renaming
      variable names within the AST. Example usage:

      >>> Symbol("x", Symbol("y"), 2).map_heads(lambda head: head+"foo")
      xfoo(yfoo, 2)


   .. py:method:: Symbol.map_tails(mapping)
      :module: dda.ast

      Calls a mapping function on all tails in all (nested) subexpressions.
      Returns a new mapped Symbol.


.. py:function:: is_symbol(smbl)
   :module: dda.ast

   Convenience function


.. py:function:: symbols(*query)
   :module: dda.ast

   Quickly make symbol objects. Usage similar to sympy's symbol function:

   >>> a, b = symbols("a", "b")
   >>> x, y, z = symbols("x, y, z")


.. py:function:: topological_sort(dependency_pairs)
   :module: dda.ast

   Sort a graph (given as edge list) subject to dependency constraints.
   The result are two lists: One for the sorted nodes, one for the
   unsortable (cyclically dependent) nodes.

   Implementation shamelessly stolen from https://stackoverflow.com/a/42359401


.. py:class:: State(initialdata={}, type_peacemaking=True, default_symbol=True)
   :module: dda.ast

   A state is a dictionary which is by convention a mapping from variable
   names (as *strings*) to their symbolic meaning, i.e. a ``Symbol()``.
   We refer to the keys in the dictionary as the *Left Hand Side* (LHS) and
   the values in the dictionary as the *Right Hand Side* (RHS), in analogy
   to an Equation.

   .. note::

      Since ``Symbol()`` spawns an AST, a state is a list of variable definitions.    
      A DDA file is a collection of equations. Therefore, a state holds the
      content of a DDA file.

   This class collects a number of basic helper routines for dealing with
   states.

   In order to simplify writing DDA files in Python, this class extends
   the dictionary idiom with the following optional features, which
   are turned on by default:

   - **Type peacemaking**: Query a ``Symbol()``, get translated to
     ``str()``:

     >>> State({ "foo": Symbol("bar")})[Symbol("foo")] == Symbol("bar")
     True

   - **Default Symbol**: Automatically add an entry when unknown:

     >>> State()["foo"] == Symbol("foo")
     True

   .. note::

      By intention, the keys of the State are always strings, never Symbols.
      This also should make sure you don't use complex ASTs for keys,
      such as ``Symbol("foo", "bar")``.

   As this is a ``collections.UserDict``, you can access the underlying dict:

   >>> x,y = symbols("x,y")
   >>> add, integrate = symbols("add", "integrate")
   >>> eqs = { x: add(y,y), y: integrate(x) }
   >>> state = State(eqs); print(state)
   State({'x': add(y, y), 'y': integrate(x)})
   >>> state.data
   {'x': add(y, y), 'y': integrate(x)}



   .. py:method:: State.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
      :module: dda.ast

      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
      In either case, this is followed by: for k, v in F.items(): D[k] = v


   .. py:method:: State.equation_adder()
      :module: dda.ast

      Syntactic sugar for adding new equations to the system. Usage:

      >>> state = State()
      >>> x,y,z,add,int = symbols("x,y,z,add,int")
      >>> eq = state.equation_adder()
      >>> eq(y=int(x))
      >>> eq(x=add(y,z), z=int(x,0,0.1))
      >>> state
      State({'x': add(y, z), 'y': int(x), 'z': int(x, 0, 0.1)})

      Known limitations: This doesn't work any better then the ``BreveState``
      below because keywords must not be variables, they will always resolve
      to their string representation.

      >>> foo = Symbol("bar")
      >>> s1, s2 = State(), State()
      >>> eq1 = s1.equation_adder()
      >>> eq1(foo=42)
      >>> s2[foo] = 42
      >>> s1
      State({'foo': 42})
      >>> s2
      State({'bar': 42})


   .. py:method:: State.map_tails(mapper)
      :module: dda.ast

      Apply :meth:`Symbol.map_tails` on all right hand sides.


   .. py:method:: State.map_heads(mapper)
      :module: dda.ast

      This function is suitable for renaming variables.
      mapper is always executed on the string variable names (Symbol heads)


   .. py:method:: State.symbols(*query)
      :module: dda.ast

      Same as :meth:`symbols()` above, but register at self (state)


   .. py:method:: State.constant_validity()
      :module: dda.ast

      Check validity of numeric constants in the state.
      Depending on context, values -1 < t < +1 are illegal.

      (Not yet implemented!)


   .. py:method:: State.dependency_graph()
      :module: dda.ast

      Returns the edge list of the variable dependency graph of this state.
      We can call :meth:`topological_sort()` on the result of this method.


   .. py:method:: State.draw_dependency_graph(export_dot=True, dot_filename='test.dot')
      :module: dda.ast

      If you have ``networkx`` and ``pyGraphViz`` installed, you can use this method
      to draw the *variable dependency graph* (see method :meth:`dependency_graph()`)
      with ``Dot``/``GraphViz``. This method will return the ``nx.DiGraph()`` instance.
      If ``export_dot`` is set, it will also write a dotfile, call ``dot`` to
      render it to a bitmap and open that bitmap.

      .. note::

         Your distribution package ``python-graphviz`` is probably not ``pygraphviz``.
         You are on the safe side if you run: ``pip install pygraphviz``


   .. py:method:: State.name_computing_elements()
      :module: dda.ast

      Name all computing elements / intermediate expressions. Returns
      a new State which is *linearized* in a way that the numbering proposes a computing
      order.

      Linearization is a fix point operation, i.e. for any
      ``lin = state.name_computing_elements()`` it is ``lin == lin.name_computing_elements()``.

      .. warning::

         Known limitations: expresions like ``foo(bar, baz(bla))`` are not resolved.
         This is good for ``const(1)`` but bad for ``neg(foo)`` or ``sqrt(bar)``:

         >>> x,y = symbols("x,y")
         >>> ns = State({ x: x(x, x(y)) })
         >>> ns.name_computing_elements() == ns
         True

         But this is clearly wrong, the correct linearization would give ``x(y)`` a name.
         FIXME (https://lab.analogparadigm.com/koeppel/dda/-/issues/8)


   .. py:method:: State.variable_ordering()
      :module: dda.ast

      Will perform an analysis of all variables occuring in this state (especially in the RHS).
      This is based on the linarized variant of this state (see :meth:`name_computing_elements()`).

      The return value is an object (actually a types.SimpleNamespace instance) which contains
      lists of variable names (as strings). The properties (categories) are primarly

        * explicit constants: Any entry ``state["foo"] = const(1.234)``
        * State variables/evolved variables: Any outcome of a time integration, i.e. ``int(...)``,
          i.e. ``Symbol("int")``. This can be as simple as ``state["foo"] = int(Symbol("foo"),...)``.
          Complex terms such as ``state["foo"] = mult(int(foo), int(bar))`` will result in
          intermediate variables called like ``int_0``, ``int_1``(see ``name_computing_elements()``
          for the code which invents these names), which are the actual evolved variables.
        * Auxilliary variables: Any other variables which are required to compute evolved
          variables.

      By intention, we **sort only the aux. variables**. One should check that they DO NOT have any
      cyclic dependency, because feedback loops are only useful on integrators at this level
      of circuit modeling.

      We differntiate the auxilliaries further into:

        * ``sorted_aux_vars``: Auxilliaries required to compute the state variable changes
        * ``cyclic_aux_vars``: Auxilliaries which have a cyclic dependency on each other
          (this should not happen as it won't lead to a stable circuit)
        * ``unneeded_auxers``: Auxilliaries which are not required to compute the state.
          These are probably used in postprocessing. If they depend on the state variables,
          further work is neccessary.

      An imperative code for evolving this state in time should then compute all aux.
      variables in the respective order before computing ``dqdt``. The dependency is
      basically, in pseudo code:

      >>> aux  = function_of(aux, state)                    # doctest: +SKIP
      >>> dqdt = function_of(aux, state)                    # doctest: +SKIP

      and in the numerical integration schema step

      >>> state = function_of(dqdt)                         # doctest: +SKIP

      TODO: Write more documentation :-)


   .. py:method:: State.export(to, **passed_args)
      :module: dda.ast

      Syntactic sugar for dda.export(), for convenience


.. py:class:: BreveState(initialdata={}, type_peacemaking=True, default_symbol=True)
   :module: dda.ast

   This subclass of a state adds *syntactic sugar* by allowing attribute/member access
   notation. Instead of ``state["foo"]`` you can write ``state.foo`` on instances of
   this class. Example usage:

   >>> x,y,z = symbols("x,y,z")
   >>> state = BreveState()
   >>> state.x = x(y,z)
   >>> state.y = y(x,z)
   >>> state.z = z(x,y)
   >>> print(state)
   BreveState({'x': x(y, z), 'y': y(x, z), 'z': z(x, y)})

   .. warning::

      Known limitations:

      * Breaks Python class introspection (for instance tab completion in *iPython*)
      * Of course users cannot add any non-data related attribute (or method)

   See also :meth:`State.equation_adder()` for similar sugar which might have
   unexpected effects:

   >>> s, b = State(), BreveState()
   >>> foo = Symbol("bar") # in this context, similar to a string foo = "bar"
   >>> s[foo] = 42         # foo resolves to string represntation "bar"
   >>> b.foo = 42          # equals b["foo"], thus has nothing to do with variable foo
   >>> s
   State({'bar': 42})
   >>> b
   BreveState({'foo': 42})

   If you find this class useful, you also might like ``types.SimpleNamespace`` or
   ``collections.namedtuple``. Both are basically immutable, while this object type
   is mutable by intention.

[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...><doctest_block...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <paragraph...><bullet_list...><paragraph...><paragraph.. ...>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><doctest_block...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...><doctest_block...><paragraph...><doctest_b ...>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...><paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...><note...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...><paragraph...><warning...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...><paragraph...><block_quote...><paragraph.. ...>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <paragraph...><note...><paragraph...><paragraph...><bull ...>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <paragraph...><doctest_block...><warning...><paragraph.. ...>)
[app] emitting event: 'doctree-read'(<document: <target...><section "abstract syntax tree; abstract-synt ...>,)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'Symbol')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'Symbol.is_variable')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'Symbol.is_term')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'Symbol.variables')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'Symbol.all_variables')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'Symbol.all_terms')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'Symbol.map_heads')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'Symbol.map_tails')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'is_symbol')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'symbols')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'topological_sort')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.update')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.equation_adder')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.map_tails')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.map_heads')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.symbols')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.constant_validity')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.dependency_graph')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.draw_dependency_graph')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.name_computing_elements')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.variable_ordering')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'State.export')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
[app] emitting event: 'viewcode-follow-imported'('dda.ast', 'BreveState')
[app] emitting event: 'viewcode-find-source'('dda.ast',)
reading sources... [ 14%] cas
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'cas')
[app] emitting event: 'source-read'('cas', [".. _cas:\n\nComputer Algebra Interfaces\n===========================\n\nDDA implements a f
[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/cas.rst:19: input:
.. automodule:: dda.sympy
   :members:


[autodoc] import dda.sympy
[autodoc] import dda.sympy => <module 'dda.sympy' from '/home/sven/Analog/Forschungsauftrag/dda/dda/sympy.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'dda.sympy', <module 'dda.sympy' from '/home/sven/Analog/Forschungsauftrag/dda/dda/sympy.
[app] emitting event: 'autodoc-process-docstring'('module', 'dda.sympy', <module 'dda.sympy' from '/home/sven/Analog/Forschungsauftrag/dda/dda/sympy.
[app] emitting event: 'autodoc-skip-member'('module', 'Symbol', <class 'dda.ast.Symbol'>, False, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/dda/__pycache__/sympy.cpython-38.p
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', '\nThis module provides interplay with the SymPy package. SymPy is a lightweig
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/dda/sympy.py', True, {'members': <ob
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb2d87c0>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'dda.sympy', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'dda', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='dda.sympy', loader=<_frozen_importlib_external.SourceFileLoa
[app] emitting event: 'autodoc-skip-member'('module', 'builtins', <module 'builtins' (built-in)>, False, {'members': <object object at 0x7f2acb
[app] emitting event: 'autodoc-skip-member'('module', 'identity', <function <lambda> at 0x7f2acb2d6700>, True, {'members': <object object at 0x
[app] emitting event: 'autodoc-skip-member'('module', 'to_latex', <function to_latex at 0x7f2acb2d68b0>, False, {'members': <object object at 0
[app] emitting event: 'autodoc-skip-member'('module', 'to_sympy', <function to_sympy at 0x7f2acb2d6820>, False, {'members': <object object at 0
[autodoc] from dda.sympy import Symbol
[autodoc] import dda.sympy => <module 'dda.sympy' from '/home/sven/Analog/Forschungsauftrag/dda/dda/sympy.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] from dda.sympy import to_sympy
[autodoc] import dda.sympy => <module 'dda.sympy' from '/home/sven/Analog/Forschungsauftrag/dda/dda/sympy.py'>
[autodoc] getattr(_, 'to_sympy')
[autodoc] => <function to_sympy at 0x7f2acb2d6820>
[app] emitting event: 'autodoc-before-process-signature'(<function to_sympy at 0x7f2acb2d6820>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.sympy.to_sympy', <function to_sympy at 0x7f2acb2d6820>, {'members': <object object
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.sympy.to_sympy', <function to_sympy at 0x7f2acb2d6820>, {'members': <object object
[autodoc] from dda.sympy import to_latex
[autodoc] import dda.sympy => <module 'dda.sympy' from '/home/sven/Analog/Forschungsauftrag/dda/dda/sympy.py'>
[autodoc] getattr(_, 'to_latex')
[autodoc] => <function to_latex at 0x7f2acb2d68b0>
[app] emitting event: 'autodoc-before-process-signature'(<function to_latex at 0x7f2acb2d68b0>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.sympy.to_latex', <function to_latex at 0x7f2acb2d68b0>, {'members': <object object
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.sympy.to_latex', <function to_latex at 0x7f2acb2d68b0>, {'members': <object object
[autodoc] output:

.. py:module:: dda.sympy

This module provides interplay with the SymPy package. SymPy is a lightweight
pure-python computer algebra system which is bundled with SciPy.
An adapter to/from SymPy allows to use powerful Computer Algebra basic
functions such as expression simplification.

We use this currently to provide a lean latex representation for the
cumbersome DDA expressions.


.. py:function:: to_sympy(state, symbol_mapper=<function <lambda>>, round_n=15)
   :module: dda.sympy

   Export a state to a set of equations for SymPy.
   Returns a list of ``sympy.Eq`` objects.
   Of course it requires Sympy installed/available.

   With Sympy, you can do all funny things, such as:

   >>> from dda import *
   >>> x,int,neg=symbols("x,int,neg")
   >>> state = State({'x': int(neg(x), 0.2, 1)})
   >>> to_sympy(state)
   [Eq(x, -Integral(1.2 - x, t))]


.. py:function:: to_latex(state, chunk_n=None)
   :module: dda.sympy

   Export to latex, using sympy.

   This mostly differs from ``sympy.latex`` for large equation
   systems where we use the align latex environment instead of
   a single equation. For the above example:

   >>> print(sympy.latex(to_sympy(state)))  # doctest: +SKIP
   \left[ x = - \int \left(1.2 - x\right)\, dt\right]
   >>> print(to_latex(state))               # doctest: +SKIP
   \begin{align}
   x &= - \int \left(1.2 - x\right)\, dt
   \end{align}




[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><doctest_block...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><doctest_block...>>)
[app] emitting event: 'doctree-read'(<document: <target...><section "computer algebra interfaces; cas"...>>,)
[app] emitting event: 'viewcode-follow-imported'('dda.sympy', 'to_sympy')
[app] emitting event: 'viewcode-find-source'('dda.sympy',)
[app] emitting event: 'viewcode-follow-imported'('dda.sympy', 'to_latex')
[app] emitting event: 'viewcode-find-source'('dda.sympy',)
/home/sven/Analog/Forschungsauftrag/dda/doc/cas.rst:17: (INFO/1) Duplicate implicit target name: âsympyâ. [filtered system message]
reading sources... [ 21%] code-testing
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'code-testing')
[app] emitting event: 'source-read'('code-testing', ['.. _code-testing:\n\nSoftware testing in PyAnalog\n============================\n
[i18n] PATCH: 'docutils.nodes.term' to have rawsource: <term><reference name="Doctests" refuri="https://docs.python.org/3/library/docte...
[i18n] PATCH: 'docutils.nodes.term' to have rawsource: <term>Acceptance/Integration tests</term>
[i18n] PATCH: 'docutils.nodes.term' to have rawsource: <term>Continous integration</term>
[i18n] PATCH: 'docutils.nodes.term' to have rawsource: <term>What about hardware tests?</term>
[app] emitting event: 'doctree-read'(<document: <target...><section "software testing in pyanalog; code- ...>,)
/home/sven/Analog/Forschungsauftrag/dda/doc/code-testing.rst:4: (WARNING/2) Duplicate explicit target name: âpytestâ. [filtered system message]
reading sources... [ 28%] computing_elements
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'computing_elements')
[app] emitting event: 'source-read'('computing_elements', ['.. _computing_elements:\n\nDDA Computing elements\n======================\n
[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/computing_elements.rst:6: input:
.. automodule:: dda.computing_elements
   :members:


[autodoc] import dda.computing_elements
[autodoc] import dda.computing_elements => <module 'dda.computing_elements' from '/home/sven/Analog/Forschungsauftrag/dda/dda/computing_elements.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'dda.computing_elements', <module 'dda.computing_elements' from '/home/sven/Analog/Forsch
[app] emitting event: 'autodoc-process-docstring'('module', 'dda.computing_elements', <module 'dda.computing_elements' from '/home/sven/Analog/Forsch
[app] emitting event: 'autodoc-skip-member'('module', 'State', <class 'dda.ast.State'>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'Symbol', <class 'dda.ast.Symbol'>, False, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/dda/__pycache__/computing_elements
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', '\nThe DDA language is built around the analog computing elements (or primitiv
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/dda/computing_elements.py', True, {'
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb2d0f70>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'dda.computing_elements', True, {'members': <object object at 0x7f2acb769900>
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'dda', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='dda.computing_elements', loader=<_frozen_importlib_external.
[app] emitting event: 'autodoc-skip-member'('module', 'abs', abs, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'const', const, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'cpp_impl', '\n/* if you use an old C++ compiler, just remove the newer features */\n#def
[app] emitting event: 'autodoc-skip-member'('module', 'dda', namespace(abs=abs, const=const, dead_lower=dead_lower, dead_upper=dead_upper, div=
[app] emitting event: 'autodoc-skip-member'('module', 'dda_functions', ['const', 'neg', 'div', 'int', 'sum', 'mult', 'dead_upper', 'dead_lower'
[app] emitting event: 'autodoc-skip-member'('module', 'dda_symbols', {'const': const, 'neg': neg, 'div': div, 'int': int, 'sum': sum, 'mult': m
[app] emitting event: 'autodoc-skip-member'('module', 'dead_lower', dead_lower, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'dead_upper', dead_upper, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'div', div, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'exp', exp, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'floor', floor, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'ge', ge, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'gt', gt, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'int', int, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'le', le, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'lt', lt, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'max', max, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'min', min, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'mult', mult, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'neg', neg, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'sqrt', sqrt, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'state', State({}), True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'sum', sum, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'symbols', <function symbols at 0x7f2acb2cda60>, False, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('module', 'types', <module 'types' from '/usr/lib/python3.8/types.py'>, False, {'members': <object 
[autodoc] from dda.computing_elements import Symbol
[autodoc] import dda.computing_elements => <module 'dda.computing_elements' from '/home/sven/Analog/Forschungsauftrag/dda/dda/computing_elements.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] from dda.computing_elements import State
[autodoc] import dda.computing_elements => <module 'dda.computing_elements' from '/home/sven/Analog/Forschungsauftrag/dda/dda/computing_elements.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] from dda.computing_elements import symbols
[autodoc] import dda.computing_elements => <module 'dda.computing_elements' from '/home/sven/Analog/Forschungsauftrag/dda/dda/computing_elements.py'>
[autodoc] getattr(_, 'symbols')
[autodoc] => <function symbols at 0x7f2acb2cda60>
[autodoc] output:

.. py:module:: dda.computing_elements

The DDA language is built around the analog computing elements (or primitives).
These are basically electrical block circuits implementing basic arithmetics
such as summation and multiplication, but also integration. These are also
special elements for clipping, exponentials, square roots, and many more.

The DDA domain specific language is agnostic for function names. Host languages
such as Python or C are not. Many of the function names are reserved words in
these languages. Examples are:

- ``const``: Reserved word in C/C++ for constant variables
- ``int``: Type name in C, overwritable in python
- ``sum``: Builtin in python
- ``div``: Function in ``stdlib.h`` in C, which can cause clashes in slightly
  more complex C codes.

When it comes to exporting to languages such as C, we rewrite these keywords.
In Python, we don't have to, because none of the well known DDA function names 
is really *reserved*. The primitive builtins can always be recovered by
``from builtins import int, sum``, etc.

Different ways to access the well-known DDA computing elements in Python
------------------------------------------------------------------------

If you write

>>> from dda.computing_elements import *
>>> int(int,sum)  # Make use of the imported Symbols
int(int, sum)

you will load a bunch of names such as ``int`` and ``sum`` in your local
namespace.

You can also just call

>>> from dda.computing_elements import dda_functions, dda_symbols
>>> print(dda_symbols["floor"]) # will print a Symbol()
floor

You can use the symbols dictionary to populate your namespace at whish:

>>> globals().update(dda_symbols)

Note that Python globals are module-local, so we cannot provide this line
as a function.

Last but not least, you can also just use the namespaced version with
prefixes, which leaves you on a safe footing:

>>> dda.floor(dda.sum)
floor(sum)

Definition/Implementation of the primitives
-------------------------------------------

Once we have a pure-Python DDA evolution code (probably using scipy), we will
have a python implementation of the DDA functions. Otherwise I could avoid that.
This module also contains a C++ implementation of the primitives, which resides
as a string (``cpp_impl``).

[app] emitting event: 'doctree-read'(<document: <target...><section "dda computing elements; computing_e ...>,)
reading sources... [ 35%] cpp-codegen
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'cpp-codegen')
[app] emitting event: 'source-read'('cpp-codegen', ['.. _cpp-codegen:\n\nDDA C++ code generator\n======================\n\n.. automodul
[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/cpp-codegen.rst:6: input:
.. automodule:: dda.cpp_exporter
   :members:


[autodoc] import dda.cpp_exporter
[autodoc] import dda.cpp_exporter => <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/dda/dda/cpp_exporter.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'dda.cpp_exporter', <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/
[app] emitting event: 'autodoc-process-docstring'('module', 'dda.cpp_exporter', <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/
[app] emitting event: 'autodoc-skip-member'('module', 'State', <class 'dda.ast.State'>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'Symbol', <class 'dda.ast.Symbol'>, False, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/dda/__pycache__/cpp_exporter.cpyth
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', '\nC++ code generation is a major feature of the PyDDA code. The generated\nco
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/dda/cpp_exporter.py', True, {'member
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb084070>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'dda.cpp_exporter', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'dda', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='dda.cpp_exporter', loader=<_frozen_importlib_external.Source
[app] emitting event: 'autodoc-skip-member'('module', 'compile', <function compile at 0x7f2acb0d6430>, False, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('module', 'cpp_impl', '\n/* if you use an old C++ compiler, just remove the newer features */\n#def
[app] emitting event: 'autodoc-skip-member'('module', 'cpp_template', '// This code was generated by PyDDA.\n\n#include <cmath> /* don\'t forge
[app] emitting event: 'autodoc-skip-member'('module', 'is_number', <function <lambda> at 0x7f2acb18db80>, True, {'members': <object object at 0
[app] emitting event: 'autodoc-skip-member'('module', 'itertools', <module 'itertools' (built-in)>, False, {'members': <object object at 0x7f2a
[app] emitting event: 'autodoc-skip-member'('module', 'math', <module 'math' from '/usr/lib/python3.8/lib-dynload/math.cpython-38-x86_64-linux-
[app] emitting event: 'autodoc-skip-member'('module', 'run', <function run at 0x7f2acb0d6310>, False, {'members': <object object at 0x7f2acb769
[app] emitting event: 'autodoc-skip-member'('module', 'textwrap', <module 'textwrap' from '/usr/lib/python3.8/textwrap.py'>, False, {'members':
[app] emitting event: 'autodoc-skip-member'('module', 'to_cpp', <function to_cpp at 0x7f2acb0d65e0>, False, {'members': <object object at 0x7f2
[app] emitting event: 'autodoc-skip-member'('module', 'topological_sort', <function topological_sort at 0x7f2acb2cdaf0>, False, {'members': <ob
[autodoc] from dda.cpp_exporter import State
[autodoc] import dda.cpp_exporter => <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/dda/dda/cpp_exporter.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] from dda.cpp_exporter import Symbol
[autodoc] import dda.cpp_exporter => <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/dda/dda/cpp_exporter.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] from dda.cpp_exporter import topological_sort
[autodoc] import dda.cpp_exporter => <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/dda/dda/cpp_exporter.py'>
[autodoc] getattr(_, 'topological_sort')
[autodoc] => <function topological_sort at 0x7f2acb2cdaf0>
[autodoc] from dda.cpp_exporter import to_cpp
[autodoc] import dda.cpp_exporter => <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/dda/dda/cpp_exporter.py'>
[autodoc] getattr(_, 'to_cpp')
[autodoc] => <function to_cpp at 0x7f2acb0d65e0>
[app] emitting event: 'autodoc-before-process-signature'(<function to_cpp at 0x7f2acb0d65e0>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.cpp_exporter.to_cpp', <function to_cpp at 0x7f2acb0d65e0>, {'members': <object obj
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.cpp_exporter.to_cpp', <function to_cpp at 0x7f2acb0d65e0>, {'members': <object obj
[autodoc] from dda.cpp_exporter import compile
[autodoc] import dda.cpp_exporter => <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/dda/dda/cpp_exporter.py'>
[autodoc] getattr(_, 'compile')
[autodoc] => <function compile at 0x7f2acb0d6430>
[app] emitting event: 'autodoc-before-process-signature'(<function compile at 0x7f2acb0d6430>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.cpp_exporter.compile', <function compile at 0x7f2acb0d6430>, {'members': <object o
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.cpp_exporter.compile', <function compile at 0x7f2acb0d6430>, {'members': <object o
[autodoc] from dda.cpp_exporter import run
[autodoc] import dda.cpp_exporter => <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/dda/dda/cpp_exporter.py'>
[autodoc] getattr(_, 'run')
[autodoc] => <function run at 0x7f2acb0d6310>
[app] emitting event: 'autodoc-before-process-signature'(<function run at 0x7f2acb0d6310>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.cpp_exporter.run', <function run at 0x7f2acb0d6310>, {'members': <object object at
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.cpp_exporter.run', <function run at 0x7f2acb0d6310>, {'members': <object object at
[autodoc] output:

.. py:module:: dda.cpp_exporter

C++ code generation is a major feature of the PyDDA code. The generated
code is built from a string template and has the following features:

* Standalone code: No further dependencies (beyond standard libc, lm and STL).
* Lightweight object oriented: Uses classes (structures) to hold the
  different variables (basically AoS instead of SoA approach). Little
  C++ templating.
* Organization in a few functions which allows to edit the generated 
  C++ code manually afterwards without going mad.
* CSV or binary output, or no output at all. Output is always made
  to stdout. Information messages are always sent to stderr.
* Debugging facilities built right into the code for setting NaNs and
  abortion in case of floating point exceptions.
* Runtime arguments via the commandline (argv): Parsing and passing.

.. note::

   **C++17** is required for building the C++ code. This is because
   we use variadic templates.

For the runtime arguments, we support so far:

- *Simulation steering*: Selection of number of integration iterations
  and frequency of dumping the solution.
- *Query based plotting*: Selection which variables shall be outputted
  at runtime.
- Further *Flags* and *Numeric arguments* as well as a useful ``--help``
  message.

We still hardcode at code generation time:

- Initial data
- time step sizes
- Variables and equation structure


.. py:function:: to_cpp(state, number_precision=inf)
   :module: dda.cpp_exporter

   Given a state, returns standalone C++ code as string.

   This code can be written to a file, compiled with a recent 
   C++ compiler and then solves the differential equation system when executed.

   The algorithm is basically:

   1. linearize the state (this can raise)
   2. determine all the C++ template fields
   3. Return the filled out template

   We plan to add logging for non-fatal information about the C++ code quality
   (see TODOs in the code).

   The argument ``number_precision`` currently has no effect.


.. py:function:: compile(code, c_filename='generated.cc', compiler='g++', compiler_output='a.out', options='--std=c++17 -Wall')
   :module: dda.cpp_exporter

   Small helper function to compile C++ code from python.

   Write string *code* to *c_filename* and run the *compiler* on that, afterwards.
   Will raise an error if compilation fails.


.. py:function:: run(command='./a.out', return_ndarray=True, arguments={}, fields_to_export=[])
   :module: dda.cpp_exporter

   Small helper function to execute a code generated by this module.

   Runs *command* on the command line, with named *arguments* in ``--foo=bar``
   fashion and *fields_to_export* just as a sequential argument list.

   Pipes stdout to a string, which is returned. Stderr will just be passed.
   The function will return once the binary finished or raise in case of error.

   Example usage:

   >>> from dda import *
   >>> state = State()
   >>> state["x"] = Symbol("int", Symbol("neg", state["x"]), 0.2, 1)
   >>> state
   State({'x': int(neg(x), 0.2, 1)})
   >>> cpp_code = to_cpp(state)
   >>> print('Generated code has about %d lines' % cpp_code.count('\n')) # doctest: +SKIP
   Generated code has about 333 lines
   >>> compile(cpp_code, compiler_output="foo.exe")
   >>> res = run("./foo.exe", arguments={'max_iterations':20}, fields_to_export=['x'])
   Running: ./a.out --max_iterations=20 x
   >>> res["x"]
   array([ 1.2    ,  1.44   ,  1.728  ,  2.0736 ,  2.48832,  2.98598,
           3.58318,  4.29982,  5.15978,  6.19174,  7.43008,  8.9161 ,
          10.6993 , 12.8392 , 15.407  , 18.4884 , 22.1861 , 26.6233 ,
          31.948  , 38.3376 ])


[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><paragraph...><enumerated_li ...>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><paragraph...><paragraph...> ...>)
[app] emitting event: 'doctree-read'(<document: <target...><section "dda c++ code generator; cpp-codegen ...>,)
[app] emitting event: 'viewcode-follow-imported'('dda.cpp_exporter', 'to_cpp')
[app] emitting event: 'viewcode-find-source'('dda.cpp_exporter',)
[app] emitting event: 'viewcode-follow-imported'('dda.cpp_exporter', 'compile')
[app] emitting event: 'viewcode-find-source'('dda.cpp_exporter',)
[app] emitting event: 'viewcode-follow-imported'('dda.cpp_exporter', 'run')
[app] emitting event: 'viewcode-find-source'('dda.cpp_exporter',)
reading sources... [ 42%] dsl
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'dsl')
[app] emitting event: 'source-read'('dsl', ['.. _dsl:\n\nThe DDA Domain Specific Language\n================================\n\n.. autom
[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/dsl.rst:6: input:
.. automodule:: dda.dsl
   :members:


[autodoc] import dda.dsl
[autodoc] import dda.dsl => <module 'dda.dsl' from '/home/sven/Analog/Forschungsauftrag/dda/dda/dsl.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'dda.dsl', <module 'dda.dsl' from '/home/sven/Analog/Forschungsauftrag/dda/dda/dsl.py'>, 
[app] emitting event: 'autodoc-process-docstring'('module', 'dda.dsl', <module 'dda.dsl' from '/home/sven/Analog/Forschungsauftrag/dda/dda/dsl.py'>, 
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/dda/__pycache__/dsl.cpython-38.pyc
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', '\nThe DDA domain specific language, also refered to as "traditional dda",\nis
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/dda/dsl.py', True, {'members': <obje
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb0e94f0>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'dda.dsl', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'dda', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='dda.dsl', loader=<_frozen_importlib_external.SourceFileLoade
[app] emitting event: 'autodoc-skip-member'('module', 'argparse', <module 'argparse' from '/usr/lib/python3.8/argparse.py'>, False, {'members':
[app] emitting event: 'autodoc-skip-member'('module', 'builtins', <module 'builtins' (built-in)>, False, {'members': <object object at 0x7f2acb
[app] emitting event: 'autodoc-skip-member'('module', 'cli_exporter', <function cli_exporter at 0x7f2acb097d30>, False, {'members': <object obj
[app] emitting event: 'autodoc-skip-member'('module', 'collections', <module 'collections' from '/usr/lib/python3.8/collections/__init__.py'>, 
[app] emitting event: 'autodoc-skip-member'('module', 'dda', <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>, Fals
[app] emitting event: 'autodoc-skip-member'('module', 'inspect', <module 'inspect' from '/usr/lib/python3.8/inspect.py'>, False, {'members': <o
[app] emitting event: 'autodoc-skip-member'('module', 'os', <module 'os' from '/usr/lib/python3.8/os.py'>, False, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'read_traditional_dda', <function read_traditional_dda at 0x7f2acb097ca0>, False, {'membe
[app] emitting event: 'autodoc-skip-member'('module', 'sys', <module 'sys' (built-in)>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'to_traditional_dda', <function to_traditional_dda at 0x7f2acb097c10>, False, {'members':
[autodoc] from dda.dsl import to_traditional_dda
[autodoc] import dda.dsl => <module 'dda.dsl' from '/home/sven/Analog/Forschungsauftrag/dda/dda/dsl.py'>
[autodoc] getattr(_, 'to_traditional_dda')
[autodoc] => <function to_traditional_dda at 0x7f2acb097c10>
[app] emitting event: 'autodoc-before-process-signature'(<function to_traditional_dda at 0x7f2acb097c10>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.dsl.to_traditional_dda', <function to_traditional_dda at 0x7f2acb097c10>, {'member
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.dsl.to_traditional_dda', <function to_traditional_dda at 0x7f2acb097c10>, {'member
[autodoc] from dda.dsl import read_traditional_dda
[autodoc] import dda.dsl => <module 'dda.dsl' from '/home/sven/Analog/Forschungsauftrag/dda/dda/dsl.py'>
[autodoc] getattr(_, 'read_traditional_dda')
[autodoc] => <function read_traditional_dda at 0x7f2acb097ca0>
[app] emitting event: 'autodoc-before-process-signature'(<function read_traditional_dda at 0x7f2acb097ca0>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.dsl.read_traditional_dda', <function read_traditional_dda at 0x7f2acb097ca0>, {'me
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.dsl.read_traditional_dda', <function read_traditional_dda at 0x7f2acb097ca0>, {'me
[autodoc] from dda.dsl import cli_exporter
[autodoc] import dda.dsl => <module 'dda.dsl' from '/home/sven/Analog/Forschungsauftrag/dda/dda/dsl.py'>
[autodoc] getattr(_, 'cli_exporter')
[autodoc] => <function cli_exporter at 0x7f2acb097d30>
[app] emitting event: 'autodoc-before-process-signature'(<function cli_exporter at 0x7f2acb097d30>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.dsl.cli_exporter', <function cli_exporter at 0x7f2acb097d30>, {'members': <object 
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.dsl.cli_exporter', <function cli_exporter at 0x7f2acb097d30>, {'members': <object 
[autodoc] output:

.. py:module:: dda.dsl

The DDA domain specific language, also refered to as "traditional dda",
is the C-like language invented by Bernd for his Perl'ish dda code.

It basically reads as the following snippet:

::

    # Single-line comments are written like this

    dt = const(0.5)  # constants are defined like this
    y0 = const(1)

    z = mult(y, y)
    y = int(y, dt, y0)


As you see, variables do not even have to be introduced and can be
used in any order. There is only one data type, the *analog line signal*
which is basically a real number within a fixed interval.


.. note::

   Interestingly, traditional DDA files are a python subset and thus can
   be easily parsed and generated by python syntax. That's why the code
   of this PyDDA module is so short. That's also a primary reason why
   DDA was rewritten in Python.



.. py:function:: to_traditional_dda(state)
   :module: dda.dsl

   Export state to canonical dda file format (i.e. without all the python).

   Returns the generated DDA file as string


.. py:function:: read_traditional_dda(content, return_ordered_dict=False)
   :module: dda.dsl

   Read some traditional dda file. We use the Python parser (``ast`` builtin)
   for this job. This is possible because the DDA syntax is a python subset and
   the parser doesn't care about semantics, only syntax.

   Thanks to the ``ast`` builtin package, we can just transform the python AST to
   the Symbolic/State class data structures used in this module.

   .. note::

      If some of the assertions fail, you can debug your DDA file by inspecting
      the output of ast.parse(content) on iPython. You can also run the Python
      debugger (pdb) on this function, for instance in iPython:

      >>> %pdb                                                  # doctest: +SKIP
      >>> read_traditional_dda(file("foo.dda").read())          # doctest: +SKIP

   Returns a state instance or OrderedDict, on preference.


.. py:function:: cli_exporter()
   :module: dda.dsl

   A Command Line Interface (CLI) for PyDDA.

   This CLI API does mainly what the old dda2c.pl script did, i.e.
   translating a (traditional) DDA file to C code. There are fewer
   options, because --iterations, --modulus and --variables are
   now runtime options for the generated C program.

   However, we can generate much more then C. Output is always text.

   Invocation is either ``python -m dda --help`` or ``python -m dda.dsl --help``
   anywhere from the system. ``setup.py`` probably also installed a
   ``pydda`` binary somewhere calling the same. You can also just
   call ``./dsl.py --help``.

[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><note...><paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><paragraph...><paragraph...>>)
[app] emitting event: 'doctree-read'(<document: <target...><section "the dda domain specific language; d ...>,)
[app] emitting event: 'viewcode-follow-imported'('dda.dsl', 'to_traditional_dda')
[app] emitting event: 'viewcode-find-source'('dda.dsl',)
[app] emitting event: 'viewcode-follow-imported'('dda.dsl', 'read_traditional_dda')
[app] emitting event: 'viewcode-find-source'('dda.dsl',)
[app] emitting event: 'viewcode-follow-imported'('dda.dsl', 'cli_exporter')
[app] emitting event: 'viewcode-find-source'('dda.dsl',)
reading sources... [ 50%] fpaa
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'fpaa')
[app] emitting event: 'source-read'('fpaa', ['.. _fpaa:\n\nAbout FPAA\n==========\n\n.. automodule:: fpaa\n   :members:\n\n.. automodul
[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/fpaa.rst:6: input:
.. automodule:: fpaa
   :members:

[autodoc] import fpaa
[autodoc] import fpaa => <module 'fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__init__.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'fpaa', <module 'fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__init__.py'>, 
[app] emitting event: 'autodoc-process-docstring'('module', 'fpaa', <module 'fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__init__.py'>, 
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__pycache__/__init__.cpython-
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', "\nPyFPAA is a compiler for programmable analog computers (FPAAs). It was writ
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__init__.py', True, {'members':
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb0572e0>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'fpaa', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'fpaa', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__path__', ['/home/sven/Analog/Forschungsauftrag/dda/fpaa'], True, {'members': <object o
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='fpaa', loader=<_frozen_importlib_external.SourceFileLoader o
[app] emitting event: 'autodoc-skip-member'('module', 'compile_instructions', <function compile_instructions at 0x7f2acb06e430>, False, {'membe
[app] emitting event: 'autodoc-skip-member'('module', 'fpaa', <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>,
[app] emitting event: 'autodoc-skip-member'('module', 'load_from_yaml', <function load_from_yaml at 0x7f2acb06e280>, False, {'members': <object
[app] emitting event: 'autodoc-skip-member'('module', 'synthesize', <function synthesize at 0x7f2acb06e310>, False, {'members': <object object 
[autodoc] from fpaa import load_from_yaml
[autodoc] import fpaa => <module 'fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__init__.py'>
[autodoc] getattr(_, 'load_from_yaml')
[autodoc] => <function load_from_yaml at 0x7f2acb06e280>
[autodoc] from fpaa import synthesize
[autodoc] import fpaa => <module 'fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__init__.py'>
[autodoc] getattr(_, 'synthesize')
[autodoc] => <function synthesize at 0x7f2acb06e310>
[autodoc] from fpaa import compile_instructions
[autodoc] import fpaa => <module 'fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__init__.py'>
[autodoc] getattr(_, 'compile_instructions')
[autodoc] => <function compile_instructions at 0x7f2acb06e430>
[autodoc] output:

.. py:module:: fpaa

PyFPAA is a compiler for programmable analog computers (FPAAs). It was written by SvenK in Dec 2019
for quickly approaching a testing infrastructure for the XBAR module for the *Analog Paradigm M-1*
analog computer.

The script requires a (lengthy) machine description, which encodes the computational parts
available and is quite similar to a machine library in VHDL. That file encodes especially the
hard-wired vs. configurable parts of the machine.
The actual program is then rather short and describes how the configurable computational parts
are connected with each other. It also specifies constant coefficients which are set with
digital potentiometers or other digital steering parameters.

The output of the code is the analog computer configuration, as required by PyHyCon. This can
be either

* a single line of text, which are mostly hexadecimal encoded
  instructions together with command characters, all following the serial console protocol which
  the HybridController of the machine expects (http://analogparadigm.com/downloads/hc_handbook.pdf).
* configuration tuples for PyHyCon
* or a direct API to PyHyCon

In order to run this program, all you need is PyYAML to read the YAML files. If you want
to draw circuit plots, you need matplotlib.

Command line interface
----------------------

::

    % python -m fpaa --help
    usage: fpaa.py [-h] [-v] [-o OUTPUT.txt] [-p OUTPUT.pdf] (-A {XBAR-Only,AP-M1-Mini} | -a path/to/my/MACHINE.yml)
                CIRCUIT.yml

    A circuit synthesizer for the HyConAVR.

    positional arguments:
    CIRCUIT.yml           The YAML file holding the circuit description

    optional arguments:
    -h, --help            show this help message and exit
    -v, --verbose         increases log verbosity for each occurence.
    -o OUTPUT.txt, --output OUTPUT.txt
                            Put output string into file (default is '-' and means stdout)
    -p OUTPUT.pdf, --plot OUTPUT.pdf
                            Plot crossbar switch
    -A {XBAR-Only,AP-M1-Mini}, --registered-arch {XBAR-Only,AP-M1-Mini}
                            Target machine architecture description: Any YAML file in directory
                            /home/sven/Analog/Forschungsauftrag/dda/fpaa is available as machine
    -a path/to/my/MACHINE.yml, --arch path/to/my/MACHINE.yml
                            Target machine architecture description (any valid filename)

See :meth:`fpaa.cli()` for further details.

[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/fpaa.rst:9: input:
.. automodule:: fpaa.fpaa
   :members:

[autodoc] import fpaa.fpaa
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'fpaa.fpaa', <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.
[app] emitting event: 'autodoc-process-docstring'('module', 'fpaa.fpaa', <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.
[app] emitting event: 'autodoc-skip-member'('module', 'Iterable', <class 'collections.abc.Iterable'>, True, {'members': <object object at 0x7f2
[app] emitting event: 'autodoc-skip-member'('module', 'Number', <class 'numbers.Number'>, False, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-skip-member'('module', 'OrderedDict', <class 'collections.OrderedDict'>, False, {'members': <object object at 0x
[app] emitting event: 'autodoc-skip-member'('module', 'Path', <class 'pathlib.Path'>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'Target', <class 'fpaa.fpaa.Target'>, False, {'members': <object object at 0x7f2acb769900
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/fpaa/__pycache__/fpaa.cpython-38.p
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', None, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py', True, {'members': <ob
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb057130>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'fpaa.fpaa', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'fpaa', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='fpaa.fpaa', loader=<_frozen_importlib_external.SourceFileLoa
[app] emitting event: 'autodoc-skip-member'('module', 'architectures_basedir', '/home/sven/Analog/Forschungsauftrag/dda/fpaa', True, {'members'
[app] emitting event: 'autodoc-skip-member'('module', 'argparse', <module 'argparse' from '/usr/lib/python3.8/argparse.py'>, False, {'members':
[app] emitting event: 'autodoc-skip-member'('module', 'available_architectures', {'XBAR-Only': '/home/sven/Analog/Forschungsauftrag/dda/fpaa/XB
[app] emitting event: 'autodoc-skip-member'('module', 'bitstring2bin', <function <lambda> at 0x7f2acb06e0d0>, True, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('module', 'bool2bin', <function <lambda> at 0x7f2acb0b0ee0>, True, {'members': <object object at 0x
[app] emitting event: 'autodoc-skip-member'('module', 'boolList2BinString', <function <lambda> at 0x7f2acb06e040>, True, {'members': <object ob
[app] emitting event: 'autodoc-skip-member'('module', 'ceil', <built-in function ceil>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'chunks', <function chunks at 0x7f2acb06e160>, True, {'members': <object object at 0x7f2a
[app] emitting event: 'autodoc-skip-member'('module', 'cli', <function cli at 0x7f2acb06e550>, False, {'members': <object object at 0x7f2acb769
[app] emitting event: 'autodoc-skip-member'('module', 'compile_instructions', <function compile_instructions at 0x7f2acb06e430>, False, {'membe
[app] emitting event: 'autodoc-skip-member'('module', 'debug', <bound method Logger.debug of <Logger /home/sven/Analog/Forschungsauftrag/dda/fp
[app] emitting event: 'autodoc-skip-member'('module', 'deepcopy', <function deepcopy at 0x7f2acd9e45e0>, False, {'members': <object object at 0
[app] emitting event: 'autodoc-skip-member'('module', 'defaultdict', <class 'collections.defaultdict'>, False, {'members': <object object at 0x
[app] emitting event: 'autodoc-skip-member'('module', 'filter_dict', <function <lambda> at 0x7f2acb0b09d0>, True, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'flatten_dict', <function <lambda> at 0x7f2acb0b0940>, True, {'members': <object object a
[app] emitting event: 'autodoc-skip-member'('module', 'glob', <module 'glob' from '/usr/lib/python3.8/glob.py'>, False, {'members': <object obj
[app] emitting event: 'autodoc-skip-member'('module', 'info', <bound method Logger.info of <Logger /home/sven/Analog/Forschungsauftrag/dda/fpaa
[app] emitting event: 'autodoc-skip-member'('module', 'int2bin', <function <lambda> at 0x7f2acb0b0f70>, True, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('module', 'last_seen_xbars', [], True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'load_from_yaml', <function load_from_yaml at 0x7f2acb06e280>, False, {'members': <object
[app] emitting event: 'autodoc-skip-member'('module', 'log', <Logger /home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py (WARNING)>, True, {'m
[app] emitting event: 'autodoc-skip-member'('module', 'logging', <module 'logging' from '/usr/lib/python3.8/logging/__init__.py'>, False, {'mem
[app] emitting event: 'autodoc-skip-member'('module', 'machines_from_list', True, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'module', '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py', True, {'members': <obje
[app] emitting event: 'autodoc-skip-member'('module', 'namedtuple', <function namedtuple at 0x7f2ace3dbf70>, False, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('module', 'normalize_potentiometer', <function normalize_potentiometer at 0x7f2acb06e3a0>, False, {
[app] emitting event: 'autodoc-skip-member'('module', 'os', <module 'os' from '/usr/lib/python3.8/os.py'>, False, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'pformat', <function pformat at 0x7f2acdeb6ee0>, False, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('module', 'pin2tuple', <function <lambda> at 0x7f2acb0b0dc0>, True, {'members': <object object at 0
[app] emitting event: 'autodoc-skip-member'('module', 'pins2tuples', <function <lambda> at 0x7f2acb0b0e50>, True, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'plot_xbar', <function plot_xbar at 0x7f2acb06e4c0>, False, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'pprint', <function pprint at 0x7f2acdeb6e50>, False, {'members': <object object at 0x7f2
[app] emitting event: 'autodoc-skip-member'('module', 'reduce', <built-in function reduce>, False, {'members': <object object at 0x7f2acb769900
[app] emitting event: 'autodoc-skip-member'('module', 'synthesize', <function synthesize at 0x7f2acb06e310>, False, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('module', 'sys', <module 'sys' (built-in)>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'yaml_load', <function yaml_load at 0x7f2acb06e1f0>, True, {'members': <object object at 
[autodoc] from fpaa.fpaa import ceil
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'ceil')
[autodoc] => <built-in function ceil>
[autodoc] from fpaa.fpaa import deepcopy
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'deepcopy')
[autodoc] => <function deepcopy at 0x7f2acd9e45e0>
[autodoc] from fpaa.fpaa import OrderedDict
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'OrderedDict')
[autodoc] => <class 'collections.OrderedDict'>
[autodoc] from fpaa.fpaa import namedtuple
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'namedtuple')
[autodoc] => <function namedtuple at 0x7f2ace3dbf70>
[autodoc] from fpaa.fpaa import defaultdict
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'defaultdict')
[autodoc] => <class 'collections.defaultdict'>
[autodoc] from fpaa.fpaa import pprint
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'pprint')
[autodoc] => <function pprint at 0x7f2acdeb6e50>
[autodoc] from fpaa.fpaa import pformat
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'pformat')
[autodoc] => <function pformat at 0x7f2acdeb6ee0>
[autodoc] from fpaa.fpaa import Path
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'Path')
[autodoc] => <class 'pathlib.Path'>
[autodoc] from fpaa.fpaa import reduce
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'reduce')
[autodoc] => <built-in function reduce>
[autodoc] from fpaa.fpaa import Number
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'Number')
[autodoc] => <class 'numbers.Number'>
[autodoc] from fpaa.fpaa import Target
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'Target')
[autodoc] => <class 'fpaa.fpaa.Target'>
[app] emitting event: 'autodoc-process-signature'('class', 'fpaa.fpaa.Target', <class 'fpaa.fpaa.Target'>, {'members': <object object at 0x7f2acb7699
[app] emitting event: 'autodoc-process-docstring'('class', 'fpaa.fpaa.Target', <class 'fpaa.fpaa.Target'>, {'members': <object object at 0x7f2acb7699
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', 'Target(part, pin)', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__getnewargs__', <function Target.__getnewargs__ at 0x7f2acb0b0d30>, True, {'members': <o
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'fpaa.fpaa', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__new__', <function Target.__new__ at 0x7f2acb0b0a60>, True, {'members': <object object a
[app] emitting event: 'autodoc-skip-member'('class', '__repr__', <function Target.__repr__ at 0x7f2acb0b0c10>, True, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', '__slots__', (), True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '_asdict', <function Target._asdict at 0x7f2acb0b0ca0>, True, {'members': <object object a
[app] emitting event: 'autodoc-skip-member'('class', '_field_defaults', {}, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '_fields', ('part', 'pin'), True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '_fields_defaults', {}, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '_make', <bound method Target._make of <class 'fpaa.fpaa.Target'>>, True, {'members': <obj
[app] emitting event: 'autodoc-skip-member'('class', '_replace', <function Target._replace at 0x7f2acb0b0b80>, True, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', 'part', <_collections._tuplegetter object at 0x7f2acb1732e0>, False, {'members': <object o
[app] emitting event: 'autodoc-skip-member'('class', 'pin', <_collections._tuplegetter object at 0x7f2acb088670>, False, {'members': <object ob
[autodoc] from fpaa.fpaa import Target.part
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'Target')
[autodoc] => <class 'fpaa.fpaa.Target'>
[autodoc] getattr(_, 'part')
[autodoc] => <_collections._tuplegetter object at 0x7f2acb1732e0>
[app] emitting event: 'autodoc-process-signature'('attribute', 'fpaa.fpaa.Target.part', <_collections._tuplegetter object at 0x7f2acb1732e0>, {'membe
[app] emitting event: 'autodoc-process-docstring'('attribute', 'fpaa.fpaa.Target.part', <_collections._tuplegetter object at 0x7f2acb1732e0>, {'membe
[autodoc] from fpaa.fpaa import Target.pin
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'Target')
[autodoc] => <class 'fpaa.fpaa.Target'>
[autodoc] getattr(_, 'pin')
[autodoc] => <_collections._tuplegetter object at 0x7f2acb088670>
[app] emitting event: 'autodoc-process-signature'('attribute', 'fpaa.fpaa.Target.pin', <_collections._tuplegetter object at 0x7f2acb088670>, {'member
[app] emitting event: 'autodoc-process-docstring'('attribute', 'fpaa.fpaa.Target.pin', <_collections._tuplegetter object at 0x7f2acb088670>, {'member
[autodoc] from fpaa.fpaa import info
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'info')
[autodoc] => <bound method Logger.info of <Logger /home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py (WARNING)>>
[autodoc] from fpaa.fpaa import debug
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'debug')
[autodoc] => <bound method Logger.debug of <Logger /home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py (WARNING)>>
[autodoc] from fpaa.fpaa import load_from_yaml
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'load_from_yaml')
[autodoc] => <function load_from_yaml at 0x7f2acb06e280>
[app] emitting event: 'autodoc-before-process-signature'(<function load_from_yaml at 0x7f2acb06e280>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'fpaa.fpaa.load_from_yaml', <function load_from_yaml at 0x7f2acb06e280>, {'members': <o
[app] emitting event: 'autodoc-process-docstring'('function', 'fpaa.fpaa.load_from_yaml', <function load_from_yaml at 0x7f2acb06e280>, {'members': <o
[autodoc] from fpaa.fpaa import synthesize
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'synthesize')
[autodoc] => <function synthesize at 0x7f2acb06e310>
[app] emitting event: 'autodoc-before-process-signature'(<function synthesize at 0x7f2acb06e310>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'fpaa.fpaa.synthesize', <function synthesize at 0x7f2acb06e310>, {'members': <object ob
[app] emitting event: 'autodoc-process-docstring'('function', 'fpaa.fpaa.synthesize', <function synthesize at 0x7f2acb06e310>, {'members': <object ob
[autodoc] from fpaa.fpaa import normalize_potentiometer
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'normalize_potentiometer')
[autodoc] => <function normalize_potentiometer at 0x7f2acb06e3a0>
[app] emitting event: 'autodoc-before-process-signature'(<function normalize_potentiometer at 0x7f2acb06e3a0>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'fpaa.fpaa.normalize_potentiometer', <function normalize_potentiometer at 0x7f2acb06e3a
[app] emitting event: 'autodoc-process-docstring'('function', 'fpaa.fpaa.normalize_potentiometer', <function normalize_potentiometer at 0x7f2acb06e3a
[autodoc] from fpaa.fpaa import compile_instructions
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'compile_instructions')
[autodoc] => <function compile_instructions at 0x7f2acb06e430>
[app] emitting event: 'autodoc-before-process-signature'(<function compile_instructions at 0x7f2acb06e430>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'fpaa.fpaa.compile_instructions', <function compile_instructions at 0x7f2acb06e430>, {'
[app] emitting event: 'autodoc-process-docstring'('function', 'fpaa.fpaa.compile_instructions', <function compile_instructions at 0x7f2acb06e430>, {'
[autodoc] from fpaa.fpaa import plot_xbar
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'plot_xbar')
[autodoc] => <function plot_xbar at 0x7f2acb06e4c0>
[app] emitting event: 'autodoc-before-process-signature'(<function plot_xbar at 0x7f2acb06e4c0>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'fpaa.fpaa.plot_xbar', <function plot_xbar at 0x7f2acb06e4c0>, {'members': <object obje
[app] emitting event: 'autodoc-process-docstring'('function', 'fpaa.fpaa.plot_xbar', <function plot_xbar at 0x7f2acb06e4c0>, {'members': <object obje
[autodoc] from fpaa.fpaa import cli
[autodoc] import fpaa.fpaa => <module 'fpaa.fpaa' from '/home/sven/Analog/Forschungsauftrag/dda/fpaa/fpaa.py'>
[autodoc] getattr(_, 'cli')
[autodoc] => <function cli at 0x7f2acb06e550>
[app] emitting event: 'autodoc-before-process-signature'(<function cli at 0x7f2acb06e550>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'fpaa.fpaa.cli', <function cli at 0x7f2acb06e550>, {'members': <object object at 0x7f2a
[app] emitting event: 'autodoc-process-docstring'('function', 'fpaa.fpaa.cli', <function cli at 0x7f2acb06e550>, {'members': <object object at 0x7f2a
[autodoc] output:

.. py:module:: fpaa.fpaa


.. py:class:: Target(part, pin)
   :module: fpaa.fpaa


   .. py:attribute:: Target.part
      :module: fpaa.fpaa

      Alias for field number 0


   .. py:attribute:: Target.pin
      :module: fpaa.fpaa

      Alias for field number 1


.. py:function:: load_from_yaml(circuit, arch)
   :module: fpaa.fpaa

   Expects arch and circuit to be strings.


.. py:function:: synthesize(circuit, arch)
   :module: fpaa.fpaa

   Translate a circuit to a netlist for a given target architecture.

   This routine is the heart of the FPAA compiler. It mainly

   * Allocates available hardware to the requested ones by the user circuits
     and allows for book keeping between the user named and architecture named computing
     components.
   * Ensures consistency of the resulting circuit (there are no dangling wires,
     no over-allocation, etc.)

   There is a lot of *info* and *debug* output available if turned on via Python
   logging.

   Expects ``arch`` and ``circuit`` to be nested data structures (dicts and lists holding
   strings and numbers), similar to their YAML representation. The documentation does
   not yet cover an in-depth description of these data structures, but there are tons
   of example YAML files which are straightforward to understand.

   Returns ``wired_circuit``, a list of computing components (which itself are again
   "PODs", i.e. dicts with nested data structures).


.. py:function:: normalize_potentiometer(value, resolution_bits=10)
   :module: fpaa.fpaa

   Map a real value [0..1] to Potentiometer value [0..1023]


.. py:function:: compile_instructions(wired_circuit, arch)
   :module: fpaa.fpaa

   Compile a netlist (``wired_circuit``) to configuration *instructions* for setting
   up the analog computer hybrid controller.

   This routine basically loops over the *hardwired parts* of the given architecture,
   i.e. built-in

   * potentiometers (DPT-24 and HC)
   * cross bar arrays (XBAR)

   and configures them according to the given wired_circuit. This means that relevant
   allocated potentiometers will be set and the XBAR configuration bitmask will be
   computed from the hardware description provided by the circuit and the architecture.

   Currently returns a list of instructions (tuples) which could be directly be written
   out to serial or passed to PyHyCon.

   .. note::
      This method will change in near time and talk directly to a PyHyCon instance.


.. py:function:: plot_xbar(target_file, circuit_title, xbar_config=None, interactive_plotting=False)
   :module: fpaa.fpaa

   Draw an the allocation of a crossbar switch array (xbar) matrix.

   xbar_config is a tuple with (cols,rows,boolean_matrix), and by default the last one
   from a global registry (last_seen_xbars) is taken, which is what you want.


.. py:function:: cli()
   :module: fpaa.fpaa

   This module is callable via ``python -m fpaa`` or ``./fpaa.py``. It exposes the main
   functions on the command line which is especially helpful for debugging or
   interactively programming an analog computer from the command line.

   Call ``--help`` for all possible command line options.

[app] emitting event: 'object-description-transform'('py', 'attribute', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'attribute', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <index...><desc...><index...><desc...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><bullet_list...><paragraph.. ...>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><bullet_list...><paragraph.. ...>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...>>)
[app] emitting event: 'doctree-read'(<document: <target...><section "about fpaa; fpaa"...>>,)
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'Target')
[app] emitting event: 'viewcode-find-source'('fpaa.fpaa',)
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'Target.part')
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'Target.pin')
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'load_from_yaml')
[app] emitting event: 'viewcode-find-source'('fpaa.fpaa',)
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'synthesize')
[app] emitting event: 'viewcode-find-source'('fpaa.fpaa',)
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'normalize_potentiometer')
[app] emitting event: 'viewcode-find-source'('fpaa.fpaa',)
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'compile_instructions')
[app] emitting event: 'viewcode-find-source'('fpaa.fpaa',)
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'plot_xbar')
[app] emitting event: 'viewcode-find-source'('fpaa.fpaa',)
[app] emitting event: 'viewcode-follow-imported'('fpaa.fpaa', 'cli')
[app] emitting event: 'viewcode-find-source'('fpaa.fpaa',)
reading sources... [ 57%] hycon
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'hycon')
[app] emitting event: 'source-read'('hycon', ['.. _hycon:\n\nAbout HyCon\n===========\n\n.. automodule:: hycon.HyCon\n   :members:\n\n'
[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/hycon.rst:6: input:
.. automodule:: hycon.HyCon
   :members:

[autodoc] import hycon.HyCon
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'hycon.HyCon', <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/
[app] emitting event: 'autodoc-process-docstring'('module', 'hycon.HyCon', <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/
[app] emitting event: 'autodoc-skip-member'('module', 'HyCon', <class 'hycon.HyCon.HyCon'>, False, {'members': <object object at 0x7f2acb769900
[app] emitting event: 'autodoc-skip-member'('module', 'HyConRequest', <class 'hycon.HyCon.HyConRequest'>, False, {'members': <object object at 
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/hycon/__pycache__/HyCon.cpython-38
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', '\nPyHyCon -- a Python Hybrid Controller interface.\n\nNote that the IO::HyCon
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py', True, {'members': <
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb0e9a90>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'hycon.HyCon', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'hycon', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='hycon.HyCon', loader=<_frozen_importlib_external.SourceFileL
[app] emitting event: 'autodoc-skip-member'('module', 'deepcopy', <function deepcopy at 0x7f2acd9e45e0>, False, {'members': <object object at 0
[app] emitting event: 'autodoc-skip-member'('module', 'ensure', <function ensure at 0x7f2acb04e280>, False, {'members': <object object at 0x7f2
[app] emitting event: 'autodoc-skip-member'('module', 'expect', <class 'hycon.HyCon.expect'>, False, {'members': <object object at 0x7f2acb7699
[app] emitting event: 'autodoc-skip-member'('module', 'log', <Logger HyCon (WARNING)>, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'logging', <module 'logging' from '/usr/lib/python3.8/logging/__init__.py'>, False, {'mem
[app] emitting event: 'autodoc-skip-member'('module', 'namedtuple', <function namedtuple at 0x7f2ace3dbf70>, False, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('module', 're', <module 're' from '/usr/lib/python3.8/re.py'>, False, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'serialdummy', <class 'hycon.HyCon.serialdummy'>, False, {'members': <object object at 0x
[app] emitting event: 'autodoc-skip-member'('module', 'sys', <module 'sys' (built-in)>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'tcpsocket', <class 'hycon.HyCon.tcpsocket'>, False, {'members': <object object at 0x7f2a
[app] emitting event: 'autodoc-skip-member'('module', 'time', <module 'time' (built-in)>, False, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-skip-member'('module', 'wont_implement', <function wont_implement at 0x7f2acb04e310>, False, {'members': <object
[autodoc] from hycon.HyCon import namedtuple
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'namedtuple')
[autodoc] => <function namedtuple at 0x7f2ace3dbf70>
[autodoc] from hycon.HyCon import deepcopy
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'deepcopy')
[autodoc] => <function deepcopy at 0x7f2acd9e45e0>
[autodoc] from hycon.HyCon import ensure
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'ensure')
[autodoc] => <function ensure at 0x7f2acb04e280>
[app] emitting event: 'autodoc-before-process-signature'(<function ensure at 0x7f2acb04e280>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'hycon.HyCon.ensure', <function ensure at 0x7f2acb04e280>, {'members': <object object a
[app] emitting event: 'autodoc-process-docstring'('function', 'hycon.HyCon.ensure', <function ensure at 0x7f2acb04e280>, {'members': <object object a
[autodoc] from hycon.HyCon import expect
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'expect')
[autodoc] => <class 'hycon.HyCon.expect'>
[app] emitting event: 'autodoc-before-process-signature'(<function expect.__init__ at 0x7f2acb04e3a0>, True)
[app] emitting event: 'autodoc-process-signature'('class', 'hycon.HyCon.expect', <class 'hycon.HyCon.expect'>, {'members': <object object at 0x7f2acb
[app] emitting event: 'autodoc-process-docstring'('class', 'hycon.HyCon.expect', <class 'hycon.HyCon.expect'>, {'members': <object object at 0x7f2acb
[app] emitting event: 'autodoc-skip-member'('class', '__call__', <function expect.__call__ at 0x7f2acb04e430>, True, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', '__dict__', mappingproxy({'__module__': 'hycon.HyCon', '__doc__': '\n    ``ensure`` delaye
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', '\n    ``ensure`` delayed and on stereoids: Can be initialized with a ``query``
[app] emitting event: 'autodoc-skip-member'('class', '__init__', <function expect.__init__ at 0x7f2acb04e3a0>, True, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'hycon.HyCon', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__str__', <function expect.__str__ at 0x7f2acb04e4c0>, True, {'members': <object object a
[app] emitting event: 'autodoc-skip-member'('class', '__weakref__', <attribute '__weakref__' of 'expect' objects>, True, {'members': <object ob
[autodoc] from hycon.HyCon import wont_implement
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'wont_implement')
[autodoc] => <function wont_implement at 0x7f2acb04e310>
[app] emitting event: 'autodoc-before-process-signature'(<function wont_implement at 0x7f2acb04e310>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'hycon.HyCon.wont_implement', <function wont_implement at 0x7f2acb04e310>, {'members': 
[app] emitting event: 'autodoc-process-docstring'('function', 'hycon.HyCon.wont_implement', <function wont_implement at 0x7f2acb04e310>, {'members': 
[autodoc] from hycon.HyCon import HyConRequest
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyConRequest')
[autodoc] => <class 'hycon.HyCon.HyConRequest'>
[app] emitting event: 'autodoc-before-process-signature'(<function HyConRequest.__init__ at 0x7f2acb04e5e0>, True)
[app] emitting event: 'autodoc-process-signature'('class', 'hycon.HyCon.HyConRequest', <class 'hycon.HyCon.HyConRequest'>, {'members': <object object
[app] emitting event: 'autodoc-process-docstring'('class', 'hycon.HyCon.HyConRequest', <class 'hycon.HyCon.HyConRequest'>, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', '__dict__', mappingproxy({'__module__': 'hycon.HyCon', '__doc__': '\n    A HyConRequest mo
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', '\n    A HyConRequest models a single *request* and *response* cycle. It stores
[app] emitting event: 'autodoc-skip-member'('class', '__init__', <function HyConRequest.__init__ at 0x7f2acb04e5e0>, True, {'members': <object 
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'hycon.HyCon', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__repr__', <function HyConRequest.__str__ at 0x7f2acb04e670>, True, {'members': <object o
[app] emitting event: 'autodoc-skip-member'('class', '__str__', <function HyConRequest.__str__ at 0x7f2acb04e670>, True, {'members': <object ob
[app] emitting event: 'autodoc-skip-member'('class', '__weakref__', <attribute '__weakref__' of 'HyConRequest' objects>, True, {'members': <obj
[app] emitting event: 'autodoc-skip-member'('class', 'read', <function HyConRequest.read at 0x7f2acb04e790>, False, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('class', 'write', <function HyConRequest.write at 0x7f2acb04e700>, False, {'members': <object objec
[autodoc] from hycon.HyCon import HyConRequest.write
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyConRequest')
[autodoc] => <class 'hycon.HyCon.HyConRequest'>
[autodoc] getattr(_, 'write')
[autodoc] => <function HyConRequest.write at 0x7f2acb04e700>
[app] emitting event: 'autodoc-before-process-signature'(<function HyConRequest.write at 0x7f2acb04e700>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyConRequest.write', <function HyConRequest.write at 0x7f2acb04e700>, {'memb
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyConRequest.write', <function HyConRequest.write at 0x7f2acb04e700>, {'memb
[autodoc] from hycon.HyCon import HyConRequest.read
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyConRequest')
[autodoc] => <class 'hycon.HyCon.HyConRequest'>
[autodoc] getattr(_, 'read')
[autodoc] => <function HyConRequest.read at 0x7f2acb04e790>
[app] emitting event: 'autodoc-before-process-signature'(<function HyConRequest.read at 0x7f2acb04e790>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyConRequest.read', <function HyConRequest.read at 0x7f2acb04e790>, {'member
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyConRequest.read', <function HyConRequest.read at 0x7f2acb04e790>, {'member
[autodoc] from hycon.HyCon import HyCon
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.__init__ at 0x7f2acb04e820>, True)
[app] emitting event: 'autodoc-process-signature'('class', 'hycon.HyCon.HyCon', <class 'hycon.HyCon.HyCon'>, {'members': <object object at 0x7f2acb76
[app] emitting event: 'autodoc-process-docstring'('class', 'hycon.HyCon.HyCon', <class 'hycon.HyCon.HyCon'>, {'members': <object object at 0x7f2acb76
[app] emitting event: 'autodoc-skip-member'('class', 'DIGITAL_INPUT_PORTS', 8, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', 'DIGITAL_OUTPUT_PORTS', 8, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', 'DPT_RESOLUTION', 10, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', 'XBAR_CONFIG_BYTES', 10, True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__dict__', mappingproxy({'__module__': 'hycon.HyCon', '__doc__': '\n    Low-Level Hybrid 
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', '\n    Low-Level Hybrid Controller OOP interface, similar to the Perl Hybrid co
[app] emitting event: 'autodoc-skip-member'('class', '__init__', <function HyCon.__init__ at 0x7f2acb04e820>, True, {'members': <object object 
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'hycon.HyCon', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__weakref__', <attribute '__weakref__' of 'HyCon' objects>, True, {'members': <object obj
[app] emitting event: 'autodoc-skip-member'('class', 'command', <function HyCon.command at 0x7f2acb04e940>, False, {'members': <object object a
[app] emitting event: 'autodoc-skip-member'('class', 'digital_output', <function HyCon.digital_output at 0x7f2acadd8430>, False, {'members': <o
[app] emitting event: 'autodoc-skip-member'('class', 'disable_ext_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eca0>, False, {
[app] emitting event: 'autodoc-skip-member'('class', 'disable_ovl_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eb80>, False, {
[app] emitting event: 'autodoc-skip-member'('class', 'enable_ext_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ed30>, False, {'
[app] emitting event: 'autodoc-skip-member'('class', 'enable_ovl_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ec10>, False, {'
[app] emitting event: 'autodoc-skip-member'('class', 'get_data', <function HyCon.get_data at 0x7f2acadd8160>, False, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', 'get_op_time', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8790>, False, {'memb
[app] emitting event: 'autodoc-skip-member'('class', 'get_status', <function HyCon.get_status at 0x7f2acadd8700>, False, {'members': <object ob
[app] emitting event: 'autodoc-skip-member'('class', 'halt', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eaf0>, False, {'members': <
[app] emitting event: 'autodoc-skip-member'('class', 'ic', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04e9d0>, False, {'members': <ob
[app] emitting event: 'autodoc-skip-member'('class', 'op', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ea60>, False, {'members': <ob
[app] emitting event: 'autodoc-skip-member'('class', 'pot_set', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eee0>, False, {'members'
[app] emitting event: 'autodoc-skip-member'('class', 'query', <function HyCon.query at 0x7f2acb04e8b0>, False, {'members': <object object at 0x
[app] emitting event: 'autodoc-skip-member'('class', 'read_digital', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd83a0>, False, {'mem
[app] emitting event: 'autodoc-skip-member'('class', 'read_dpts', <function wont_implement.<locals>.not_implemented at 0x7f2acadd8670>, False, 
[app] emitting event: 'autodoc-skip-member'('class', 'read_element_by_address', <function HyCon.read_element_by_address at 0x7f2acadd81f0>, Fal
[app] emitting event: 'autodoc-skip-member'('class', 'read_mpts', <function wont_implement.<locals>.not_implemented at 0x7f2acadd8550>, False, 
[app] emitting event: 'autodoc-skip-member'('class', 'read_ro_group', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8310>, False, {'me
[app] emitting event: 'autodoc-skip-member'('class', 'repetitive_run', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04edc0>, False, {'m
[app] emitting event: 'autodoc-skip-member'('class', 'reset', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8820>, False, {'members': 
[app] emitting event: 'autodoc-skip-member'('class', 'set_ic_time', <function HyCon.set_ic_time at 0x7f2acadd8040>, False, {'members': <object 
[app] emitting event: 'autodoc-skip-member'('class', 'set_op_time', <function HyCon.set_op_time at 0x7f2acadd80d0>, False, {'members': <object 
[app] emitting event: 'autodoc-skip-member'('class', 'set_pt', <function HyCon.set_pt at 0x7f2acadd85e0>, False, {'members': <object object at 
[app] emitting event: 'autodoc-skip-member'('class', 'set_ro_group', <function HyCon.set_ro_group at 0x7f2acadd8280>, False, {'members': <objec
[app] emitting event: 'autodoc-skip-member'('class', 'set_xbar', <function HyCon.set_xbar at 0x7f2acadd84c0>, False, {'members': <object object
[app] emitting event: 'autodoc-skip-member'('class', 'single_run', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ee50>, False, {'membe
[app] emitting event: 'autodoc-skip-member'('class', 'single_run_sync', <function HyCon.single_run_sync at 0x7f2acb04ef70>, False, {'members': 
[autodoc] from hycon.HyCon import HyCon.query
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'query')
[autodoc] => <function HyCon.query at 0x7f2acb04e8b0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.query at 0x7f2acb04e8b0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.query', <function HyCon.query at 0x7f2acb04e8b0>, {'members': <object 
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.query', <function HyCon.query at 0x7f2acb04e8b0>, {'members': <object 
[autodoc] from hycon.HyCon import HyCon.command
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'command')
[autodoc] => <function HyCon.command at 0x7f2acb04e940>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command at 0x7f2acb04e940>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.command', <function HyCon.command at 0x7f2acb04e940>, {'members': <obj
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.command', <function HyCon.command at 0x7f2acb04e940>, {'members': <obj
[autodoc] from hycon.HyCon import HyCon.ic
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'ic')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04e9d0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04e9d0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.ic', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04e9d0>, {'m
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.ic', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04e9d0>, {'m
[autodoc] from hycon.HyCon import HyCon.op
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'op')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ea60>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04ea60>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.op', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ea60>, {'m
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.op', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ea60>, {'m
[autodoc] from hycon.HyCon import HyCon.halt
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'halt')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eaf0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04eaf0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.halt', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eaf0>, {
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.halt', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eaf0>, {
[autodoc] from hycon.HyCon import HyCon.disable_ovl_halt
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'disable_ovl_halt')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eb80>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04eb80>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.disable_ovl_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2a
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.disable_ovl_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2a
[autodoc] from hycon.HyCon import HyCon.enable_ovl_halt
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'enable_ovl_halt')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ec10>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04ec10>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.enable_ovl_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2ac
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.enable_ovl_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2ac
[autodoc] from hycon.HyCon import HyCon.disable_ext_halt
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'disable_ext_halt')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eca0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04eca0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.disable_ext_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2a
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.disable_ext_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2a
[autodoc] from hycon.HyCon import HyCon.enable_ext_halt
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'enable_ext_halt')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ed30>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04ed30>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.enable_ext_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2ac
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.enable_ext_halt', <function HyCon.command.<locals>.<lambda> at 0x7f2ac
[autodoc] from hycon.HyCon import HyCon.repetitive_run
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'repetitive_run')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04edc0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04edc0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.repetitive_run', <function HyCon.command.<locals>.<lambda> at 0x7f2acb
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.repetitive_run', <function HyCon.command.<locals>.<lambda> at 0x7f2acb
[autodoc] from hycon.HyCon import HyCon.single_run
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'single_run')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ee50>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04ee50>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.single_run', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ee
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.single_run', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04ee
[autodoc] from hycon.HyCon import HyCon.pot_set
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'pot_set')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eee0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acb04eee0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.pot_set', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eee0>
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.pot_set', <function HyCon.command.<locals>.<lambda> at 0x7f2acb04eee0>
[autodoc] from hycon.HyCon import HyCon.single_run_sync
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'single_run_sync')
[autodoc] => <function HyCon.single_run_sync at 0x7f2acb04ef70>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.single_run_sync at 0x7f2acb04ef70>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.single_run_sync', <function HyCon.single_run_sync at 0x7f2acb04ef70>, 
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.single_run_sync', <function HyCon.single_run_sync at 0x7f2acb04ef70>, 
[autodoc] from hycon.HyCon import HyCon.set_ic_time
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'set_ic_time')
[autodoc] => <function HyCon.set_ic_time at 0x7f2acadd8040>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.set_ic_time at 0x7f2acadd8040>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.set_ic_time', <function HyCon.set_ic_time at 0x7f2acadd8040>, {'member
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.set_ic_time', <function HyCon.set_ic_time at 0x7f2acadd8040>, {'member
[autodoc] from hycon.HyCon import HyCon.set_op_time
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'set_op_time')
[autodoc] => <function HyCon.set_op_time at 0x7f2acadd80d0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.set_op_time at 0x7f2acadd80d0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.set_op_time', <function HyCon.set_op_time at 0x7f2acadd80d0>, {'member
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.set_op_time', <function HyCon.set_op_time at 0x7f2acadd80d0>, {'member
[autodoc] from hycon.HyCon import HyCon.get_data
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'get_data')
[autodoc] => <function HyCon.get_data at 0x7f2acadd8160>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.get_data at 0x7f2acadd8160>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.get_data', <function HyCon.get_data at 0x7f2acadd8160>, {'members': <o
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.get_data', <function HyCon.get_data at 0x7f2acadd8160>, {'members': <o
[autodoc] from hycon.HyCon import HyCon.read_element_by_address
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'read_element_by_address')
[autodoc] => <function HyCon.read_element_by_address at 0x7f2acadd81f0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.read_element_by_address at 0x7f2acadd81f0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.read_element_by_address', <function HyCon.read_element_by_address at 0
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.read_element_by_address', <function HyCon.read_element_by_address at 0
[autodoc] from hycon.HyCon import HyCon.set_ro_group
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'set_ro_group')
[autodoc] => <function HyCon.set_ro_group at 0x7f2acadd8280>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.set_ro_group at 0x7f2acadd8280>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.set_ro_group', <function HyCon.set_ro_group at 0x7f2acadd8280>, {'memb
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.set_ro_group', <function HyCon.set_ro_group at 0x7f2acadd8280>, {'memb
[autodoc] from hycon.HyCon import HyCon.read_ro_group
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'read_ro_group')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8310>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acadd8310>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.read_ro_group', <function HyCon.command.<locals>.<lambda> at 0x7f2acad
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.read_ro_group', <function HyCon.command.<locals>.<lambda> at 0x7f2acad
[autodoc] from hycon.HyCon import HyCon.read_digital
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'read_digital')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acadd83a0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acadd83a0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.read_digital', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.read_digital', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd
[autodoc] from hycon.HyCon import HyCon.digital_output
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'digital_output')
[autodoc] => <function HyCon.digital_output at 0x7f2acadd8430>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.digital_output at 0x7f2acadd8430>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.digital_output', <function HyCon.digital_output at 0x7f2acadd8430>, {'
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.digital_output', <function HyCon.digital_output at 0x7f2acadd8430>, {'
[autodoc] from hycon.HyCon import HyCon.set_xbar
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'set_xbar')
[autodoc] => <function HyCon.set_xbar at 0x7f2acadd84c0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.set_xbar at 0x7f2acadd84c0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.set_xbar', <function HyCon.set_xbar at 0x7f2acadd84c0>, {'members': <o
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.set_xbar', <function HyCon.set_xbar at 0x7f2acadd84c0>, {'members': <o
[autodoc] from hycon.HyCon import HyCon.read_mpts
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'read_mpts')
[autodoc] => <function wont_implement.<locals>.not_implemented at 0x7f2acadd8550>
[app] emitting event: 'autodoc-before-process-signature'(<function wont_implement.<locals>.not_implemented at 0x7f2acadd8550>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.read_mpts', <function wont_implement.<locals>.not_implemented at 0x7f2
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.read_mpts', <function wont_implement.<locals>.not_implemented at 0x7f2
[autodoc] from hycon.HyCon import HyCon.set_pt
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'set_pt')
[autodoc] => <function HyCon.set_pt at 0x7f2acadd85e0>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.set_pt at 0x7f2acadd85e0>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.set_pt', <function HyCon.set_pt at 0x7f2acadd85e0>, {'members': <objec
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.set_pt', <function HyCon.set_pt at 0x7f2acadd85e0>, {'members': <objec
[autodoc] from hycon.HyCon import HyCon.read_dpts
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'read_dpts')
[autodoc] => <function wont_implement.<locals>.not_implemented at 0x7f2acadd8670>
[app] emitting event: 'autodoc-before-process-signature'(<function wont_implement.<locals>.not_implemented at 0x7f2acadd8670>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.read_dpts', <function wont_implement.<locals>.not_implemented at 0x7f2
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.read_dpts', <function wont_implement.<locals>.not_implemented at 0x7f2
[autodoc] from hycon.HyCon import HyCon.get_status
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'get_status')
[autodoc] => <function HyCon.get_status at 0x7f2acadd8700>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.get_status at 0x7f2acadd8700>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.get_status', <function HyCon.get_status at 0x7f2acadd8700>, {'members'
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.get_status', <function HyCon.get_status at 0x7f2acadd8700>, {'members'
[autodoc] from hycon.HyCon import HyCon.get_op_time
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'get_op_time')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8790>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acadd8790>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.get_op_time', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.get_op_time', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8
[autodoc] from hycon.HyCon import HyCon.reset
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'HyCon')
[autodoc] => <class 'hycon.HyCon.HyCon'>
[autodoc] getattr(_, 'reset')
[autodoc] => <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8820>
[app] emitting event: 'autodoc-before-process-signature'(<function HyCon.command.<locals>.<lambda> at 0x7f2acadd8820>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.HyCon.reset', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8820>, 
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.HyCon.reset', <function HyCon.command.<locals>.<lambda> at 0x7f2acadd8820>, 
[autodoc] from hycon.HyCon import serialdummy
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'serialdummy')
[autodoc] => <class 'hycon.HyCon.serialdummy'>
[app] emitting event: 'autodoc-before-process-signature'(<class 'hycon.HyCon.serialdummy'>, False)
[app] emitting event: 'autodoc-process-signature'('class', 'hycon.HyCon.serialdummy', <class 'hycon.HyCon.serialdummy'>, {'members': <object object a
[app] emitting event: 'autodoc-process-docstring'('class', 'hycon.HyCon.serialdummy', <class 'hycon.HyCon.serialdummy'>, {'members': <object object a
[app] emitting event: 'autodoc-skip-member'('class', '__dict__', mappingproxy({'__module__': 'hycon.HyCon', '__doc__': 'Dummy IOWrapper for tes
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', 'Dummy IOWrapper for testing HyCon.py without the actual hardware', True, {'mem
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'hycon.HyCon', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__weakref__', <attribute '__weakref__' of 'serialdummy' objects>, True, {'members': <obje
[app] emitting event: 'autodoc-skip-member'('class', 'readline', <function serialdummy.readline at 0x7f2acadd8940>, True, {'members': <object o
[app] emitting event: 'autodoc-skip-member'('class', 'write', <function serialdummy.write at 0x7f2acadd88b0>, True, {'members': <object object 
[autodoc] from hycon.HyCon import tcpsocket
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'tcpsocket')
[autodoc] => <class 'hycon.HyCon.tcpsocket'>
[app] emitting event: 'autodoc-before-process-signature'(<function tcpsocket.__init__ at 0x7f2acadd89d0>, True)
[app] emitting event: 'autodoc-process-signature'('class', 'hycon.HyCon.tcpsocket', <class 'hycon.HyCon.tcpsocket'>, {'members': <object object at 0x
[app] emitting event: 'autodoc-process-docstring'('class', 'hycon.HyCon.tcpsocket', <class 'hycon.HyCon.tcpsocket'>, {'members': <object object at 0x
[app] emitting event: 'autodoc-skip-member'('class', '__dict__', mappingproxy({'__module__': 'hycon.HyCon', '__doc__': 'Wrapper for communicati
[app] emitting event: 'autodoc-skip-member'('class', '__doc__', 'Wrapper for communicating with HyCon over TCP/IP. See also HyCon-over-TCP.READ
[app] emitting event: 'autodoc-skip-member'('class', '__init__', <function tcpsocket.__init__ at 0x7f2acadd89d0>, True, {'members': <object obj
[app] emitting event: 'autodoc-skip-member'('class', '__module__', 'hycon.HyCon', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('class', '__weakref__', <attribute '__weakref__' of 'tcpsocket' objects>, True, {'members': <object
[app] emitting event: 'autodoc-skip-member'('class', 'readline', <function tcpsocket.readline at 0x7f2acadd8af0>, True, {'members': <object obj
[app] emitting event: 'autodoc-skip-member'('class', 'write', <function tcpsocket.write at 0x7f2acadd8a60>, False, {'members': <object object a
[autodoc] from hycon.HyCon import tcpsocket.write
[autodoc] import hycon.HyCon => <module 'hycon.HyCon' from '/home/sven/Analog/Forschungsauftrag/dda/hycon/HyCon.py'>
[autodoc] getattr(_, 'tcpsocket')
[autodoc] => <class 'hycon.HyCon.tcpsocket'>
[autodoc] getattr(_, 'write')
[autodoc] => <function tcpsocket.write at 0x7f2acadd8a60>
[app] emitting event: 'autodoc-before-process-signature'(<function tcpsocket.write at 0x7f2acadd8a60>, True)
[app] emitting event: 'autodoc-process-signature'('method', 'hycon.HyCon.tcpsocket.write', <function tcpsocket.write at 0x7f2acadd8a60>, {'members': 
[app] emitting event: 'autodoc-process-docstring'('method', 'hycon.HyCon.tcpsocket.write', <function tcpsocket.write at 0x7f2acadd8a60>, {'members': 
[autodoc] output:

.. py:module:: hycon.HyCon

PyHyCon -- a Python Hybrid Controller interface.

Note that the IO::HyCon Perl module is the reference implementation
that is maintained by the HyConAVR firmware author (Bernd).

While this implementation tries to be API-compatible with the reference
implementation, it tries to be minimal/low-level and won't implement any
client-side luxury (such as address mapping). It is the task of the
user to implement something high-level ontop of this.

Furthermore, this single-file module currently does not (yet) depend
on PySerial or similar. This is because it was mainly texted against
textual output or TCP/IP communication with the HyCon microcontroller.
It is up to the user to ensure proper communication. A few examples
are given at the end of this file.

::

    (c) Sven KÃ¶ppel 2019, Dual licensed with GPLv2, BSD

Examples
--------

Run these examples with an interactive python REPL to play with them:

* Example how to use PyHyCon with a microcontroller "simulator":

>>> ac = HyCon(serialdummy())                                                                                            
>>> ac.set_ic_time(1234)                                  # doctest: +SKIP                                                                                  
<< Sending [C001234] to uC
[type reply of uC]>> T_IC=1234
HyConRequest(C001234, expect(eq: T_IC=1234), self.executed=True, response=T_IC=1234, reply=T_IC=1234)

* Example how to use PyHyCon only for writing firmware command:

>>> ac = HyCon(sys.stdout, unidirectional=True)
>>> ac.set_ic_time(234)
C000234HyConRequest(C000234, expect(eq: T_IC=234), self.executed=True, response=n.a., reply=n.a.)

* Example how to use PyHyCon over TCP/IP:

>>> sock = tcpsocket("localhost", 12345)                 # doctest: +SKIP
>>> ac = HyCon(sock)                                     # doctest: +SKIP
>>> ac.reset()                                           # doctest: +SKIP
>>> ac.digital_output(3, True)                           # doctest: +SKIP
>>> ac.set_op_time(123)                                  # doctest: +SKIP
>>> ac.set_xbar(0x0040, "0000000210840000781B")          # doctest: +SKIP


.. py:function:: ensure(var, **q)
   :module: hycon.HyCon

   This is our assert function which is used widely over the code for dynamic
   parameter checking. ``q`` stands for *query*. The function will return
   silently if the query is fullfilled and raise a ``ValueError`` otherwise.
   Examples for success:

   >>> ensure(42, eq=42)
   >>> ensure("foo bar", re="fo+.*")
   >>> ensure(17, inrange=(0,20))
   >>> ensure("x", within="xyz")
   >>> ensure("bla", length=3)
   >>> ensure("blub", isa=str, length=4, re="b.*")

   And in case of failure:
   >>> ensure(3, within=[1,2,9])
   Traceback (most recent call last):
   ...
   ValueError: Got var=3, but it is none of [1, 2, 9].


.. py:class:: expect(**q)
   :module: hycon.HyCon

   ``ensure`` delayed and on stereoids: Can be initialized with a ``query`` (but with
   further options) and then called with a ``HyConRequest``. Will check the *response*
   and also allows *return value mapping*, for instance with regexpes or by splitting.
   Example:

   >>> R = HyConRequest("dummy")
   >>> R.response = "1,2,3"
   >>> E = expect(split=",", type=int)
   >>> print(list(E(R)))
   [1, 2, 3]


.. py:function:: wont_implement(reason)
   :module: hycon.HyCon

   Will not implement: Returns a function which raises ``NotImplementedError(reason)`` when called.


.. py:class:: HyConRequest(command, expected_response=None)
   :module: hycon.HyCon

   A HyConRequest models a single *request* and *response* cycle. It stores the ASCII ``command``
   emitted by the HyCon and can save a *expected response* future/promise (see ``expect`` class).
   A HyConRequest can only be made once. If you want to do it several times, you have to (deep)
   copy the instance.


   .. py:method:: HyConRequest.write(hycon)
      :module: hycon.HyCon

      Run this request. Can only be executed once. Can be chained.


   .. py:method:: HyConRequest.read(hycon, expected_response=None, read_again=False)
      :module: hycon.HyCon

      Read response from HyCon. If *read_again* is given, will read several times. Can be chained.


.. py:class:: HyCon(fh, unidirectional=False)
   :module: hycon.HyCon

   Low-Level Hybrid Controller OOP interface, similar to the Perl Hybrid controller.

   This is a minimalistic implementation which tries to implement all neccessary checking
   of input/output request/reply structure correctness, but won't do any *high level*
   support for applications. Users are assumed to write such code on themselves. The PyFPAA
   library is an example for a high level "frontend" against HyCon, which includes a
   circuit understanding, etc.


   .. py:method:: HyCon.query(*args, **kwargs)
      :module: hycon.HyCon

      Create a request, run it and check the reply


   .. py:method:: HyCon.command(*, help=None, **kwargs)
      :module: hycon.HyCon

      Return a method which, when called, creates a request, runs it and checks the reply


   .. py:method:: HyCon.ic()
      :module: hycon.HyCon

      Switch AC to IC-mode


   .. py:method:: HyCon.op()
      :module: hycon.HyCon

      Switch AC to OP-mode


   .. py:method:: HyCon.halt()
      :module: hycon.HyCon

      Switch AC to HALT-mode


   .. py:method:: HyCon.disable_ovl_halt()
      :module: hycon.HyCon

      Disable HALT-on-overflow


   .. py:method:: HyCon.enable_ovl_halt()
      :module: hycon.HyCon

      Enable HALT-on-overflow


   .. py:method:: HyCon.disable_ext_halt()
      :module: hycon.HyCon

      Disable external HALT


   .. py:method:: HyCon.enable_ext_halt()
      :module: hycon.HyCon

      Enable external HALT


   .. py:method:: HyCon.repetitive_run()
      :module: hycon.HyCon

      Switch to RepOp


   .. py:method:: HyCon.single_run()
      :module: hycon.HyCon

      One IC-OP-HALT-cycle


   .. py:method:: HyCon.pot_set()
      :module: hycon.HyCon

      Activate POTSET-mode


   .. py:method:: HyCon.single_run_sync()
      :module: hycon.HyCon

      Synchronous run (finishes after a single run finished). Return value is true if terminated by ext. halt condition


   .. py:method:: HyCon.set_ic_time(ictime)
      :module: hycon.HyCon

      Sets IC (initial condition) time in microseconds


   .. py:method:: HyCon.set_op_time(optime)
      :module: hycon.HyCon

      Sets OP (operation mode) time in microseconds


   .. py:method:: HyCon.get_data()
      :module: hycon.HyCon

      Supposed to be called when a read out group is defined and the machine is in (synchronous) OP mode. 


   .. py:method:: HyCon.read_element_by_address(address)
      :module: hycon.HyCon

      Read any machine element voltage. Expecting 16-bit element address as integer.


   .. py:method:: HyCon.set_ro_group(addresses)
      :module: hycon.HyCon

      Defines a read out group, expects addresses to be an integer list of 16-bit element addresses.


   .. py:method:: HyCon.read_ro_group()
      :module: hycon.HyCon

      Query for currently set read out group


   .. py:method:: HyCon.read_digital()
      :module: hycon.HyCon

      Read digital inputs


   .. py:method:: HyCon.digital_output(port, state)
      :module: hycon.HyCon

      Set digital output pins of the Hybrid Controller


   .. py:method:: HyCon.set_xbar(address, config)
      :module: hycon.HyCon

      Exactly {self.XBAR_CONFIG_BYTES*2} HEX-nibbles are required to config data.


   .. py:method:: HyCon.read_mpts(**kw)
      :module: hycon.HyCon

      *Not implemented* because because it is just a high-level function which calls pot_set and iterates a list of potentiometer address/names.


   .. py:method:: HyCon.set_pt(address, number, value)
      :module: hycon.HyCon

      Set a digital potentiometer by address/number.


   .. py:method:: HyCon.read_dpts(**kw)
      :module: hycon.HyCon

      *Not implemented* because because it doesn't actually self.query the hardware but just ask the HC about its internal storage.


   .. py:method:: HyCon.get_status()
      :module: hycon.HyCon

      Queries the HybridController about it's current status. Will return a dictionary.


   .. py:method:: HyCon.get_op_time()
      :module: hycon.HyCon

      Asks about current OP time


   .. py:method:: HyCon.reset()
      :module: hycon.HyCon

      Resets the HybridController (has no effect on python instance itself)


.. py:class:: serialdummy()
   :module: hycon.HyCon

   Dummy IOWrapper for testing HyCon.py without the actual hardware


.. py:class:: tcpsocket(host, port)
   :module: hycon.HyCon

   Wrapper for communicating with HyCon over TCP/IP. See also HyCon-over-TCP.README for further instructions


   .. py:method:: tcpsocket.write(sth)
      :module: hycon.HyCon

      Expects sth to be a string

[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><doctest_block...><paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <paragraph...><doctest_block...>>)
[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <paragraph...><index...><desc...><index...><desc...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <paragraph...><paragraph...><index...><desc...><index... ...>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'method', <desc_content: <paragraph...>>)
[app] emitting event: 'object-description-transform'('py', 'class', <desc_content: <paragraph...><index...><desc...>>)
[app] emitting event: 'doctree-read'(<document: <target...><section "about hycon; hycon"...>>,)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'ensure')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'expect')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'wont_implement')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyConRequest')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyConRequest.write')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyConRequest.read')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.query')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.command')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.ic')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.op')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.halt')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.disable_ovl_halt')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.enable_ovl_halt')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.disable_ext_halt')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.enable_ext_halt')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.repetitive_run')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.single_run')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.pot_set')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.single_run_sync')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.set_ic_time')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.set_op_time')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.get_data')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.read_element_by_address')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.set_ro_group')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.read_ro_group')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.read_digital')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.digital_output')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.set_xbar')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.read_mpts')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.set_pt')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.read_dpts')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.get_status')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.get_op_time')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'HyCon.reset')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'serialdummy')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'tcpsocket')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
[app] emitting event: 'viewcode-follow-imported'('hycon.HyCon', 'tcpsocket.write')
[app] emitting event: 'viewcode-find-source'('hycon.HyCon',)
reading sources... [ 64%] hycon-networking
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'hycon-networking')
[app] emitting event: 'source-read'('hycon-networking', ['.. _foo:\n\nHyCon Serial (USB/RS-232) over TCP/IP\n==========================
[app] emitting event: 'doctree-read'(<document: <target...><section "hycon serial (usb/rs-232) over tcp/ ...>,)
reading sources... [ 71%] index
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'index')
[app] emitting event: 'source-read'('index', ['Pyanalog: A pythonic analog computer demonstrator interface\n===========================
[app] emitting event: 'doctree-read'(<document: <section "pyanalog: a pythonic analog computer demonstra ...>,)
/home/sven/Analog/Forschungsauftrag/dda/doc/index.rst:113: (WARNING/2) toctree contains reference to nonexisting document âfooâ [filtered system message]
reading sources... [ 78%] installation
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'installation')
[app] emitting event: 'source-read'('installation', [".. _installation:\n\nObtaining and installing PyAnalog\n=========================
[app] emitting event: 'doctree-read'(<document: <target...><section "obtaining and installing pyanalog;  ...>,)
reading sources... [ 85%] intro
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'intro')
[app] emitting event: 'source-read'('intro', ['.. _intro:\n\nThe PyDDA package\n=================\n\n.. automodule:: dda\n   :members:\
[autodoc] /home/sven/Analog/Forschungsauftrag/dda/doc/intro.rst:6: input:
.. automodule:: dda
   :members:



[autodoc] import dda
[autodoc] import dda => <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>
[app] emitting event: 'autodoc-process-signature'('module', 'dda', <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>, {'m
[app] emitting event: 'autodoc-process-docstring'('module', 'dda', <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>, {'m
[app] emitting event: 'autodoc-skip-member'('module', 'BreveState', <class 'dda.ast.BreveState'>, False, {'members': <object object at 0x7f2acb
[app] emitting event: 'autodoc-skip-member'('module', 'State', <class 'dda.ast.State'>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'Symbol', <class 'dda.ast.Symbol'>, False, {'members': <object object at 0x7f2acb769900>}
[app] emitting event: 'autodoc-skip-member'('module', '__builtins__', {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and 
[app] emitting event: 'autodoc-skip-member'('module', '__cached__', '/home/sven/Analog/Forschungsauftrag/dda/dda/__pycache__/__init__.cpython-3
[app] emitting event: 'autodoc-skip-member'('module', '__doc__', '\nPyDDA is a small library to write and generate DDA code in Python.\nDDA sta
[app] emitting event: 'autodoc-skip-member'('module', '__file__', '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py', True, {'members': 
[app] emitting event: 'autodoc-skip-member'('module', '__loader__', <_frozen_importlib_external.SourceFileLoader object at 0x7f2acb302520>, Tru
[app] emitting event: 'autodoc-skip-member'('module', '__name__', 'dda', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__package__', 'dda', True, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', '__path__', ['/home/sven/Analog/Forschungsauftrag/dda/dda'], True, {'members': <object ob
[app] emitting event: 'autodoc-skip-member'('module', '__spec__', ModuleSpec(name='dda', loader=<_frozen_importlib_external.SourceFileLoader ob
[app] emitting event: 'autodoc-skip-member'('module', 'ast', <module 'dda.ast' from '/home/sven/Analog/Forschungsauftrag/dda/dda/ast.py'>, Fals
[app] emitting event: 'autodoc-skip-member'('module', 'computing_elements', <module 'dda.computing_elements' from '/home/sven/Analog/Forschungs
[app] emitting event: 'autodoc-skip-member'('module', 'cpp_exporter', <module 'dda.cpp_exporter' from '/home/sven/Analog/Forschungsauftrag/dda/
[app] emitting event: 'autodoc-skip-member'('module', 'dda', namespace(abs=abs, const=const, dead_lower=dead_lower, dead_upper=dead_upper, div=
[app] emitting event: 'autodoc-skip-member'('module', 'dda_functions', ['const', 'neg', 'div', 'int', 'sum', 'mult', 'dead_upper', 'dead_lower'
[app] emitting event: 'autodoc-skip-member'('module', 'dda_symbols', {'const': const, 'neg': neg, 'div': div, 'int': int, 'sum': sum, 'mult': m
[app] emitting event: 'autodoc-skip-member'('module', 'dsl', <module 'dda.dsl' from '/home/sven/Analog/Forschungsauftrag/dda/dda/dsl.py'>, Fals
[app] emitting event: 'autodoc-skip-member'('module', 'export', <function export at 0x7f2acb2cd040>, False, {'members': <object object at 0x7f2
[app] emitting event: 'autodoc-skip-member'('module', 'is_symbol', <function is_symbol at 0x7f2acb2cd310>, False, {'members': <object object at
[app] emitting event: 'autodoc-skip-member'('module', 'symbols', <function symbols at 0x7f2acb2cda60>, False, {'members': <object object at 0x7
[app] emitting event: 'autodoc-skip-member'('module', 'sympy', <module 'dda.sympy' from '/home/sven/Analog/Forschungsauftrag/dda/dda/sympy.py'>
[app] emitting event: 'autodoc-skip-member'('module', 'sys', <module 'sys' (built-in)>, False, {'members': <object object at 0x7f2acb769900>})
[app] emitting event: 'autodoc-skip-member'('module', 'to_sympy', <function to_sympy at 0x7f2acb2d6820>, False, {'members': <object object at 0
[autodoc] from dda import export
[autodoc] import dda => <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>
[autodoc] getattr(_, 'export')
[autodoc] => <function export at 0x7f2acb2cd040>
[app] emitting event: 'autodoc-before-process-signature'(<function export at 0x7f2acb2cd040>, False)
[app] emitting event: 'autodoc-process-signature'('function', 'dda.export', <function export at 0x7f2acb2cd040>, {'members': <object object at 0x7f2a
[app] emitting event: 'autodoc-process-docstring'('function', 'dda.export', <function export at 0x7f2acb2cd040>, {'members': <object object at 0x7f2a
[autodoc] from dda import Symbol
[autodoc] import dda => <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>
[autodoc] getattr(_, 'Symbol')
[autodoc] => <class 'dda.ast.Symbol'>
[autodoc] from dda import State
[autodoc] import dda => <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>
[autodoc] getattr(_, 'State')
[autodoc] => <class 'dda.ast.State'>
[autodoc] from dda import BreveState
[autodoc] import dda => <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>
[autodoc] getattr(_, 'BreveState')
[autodoc] => <class 'dda.ast.BreveState'>
[autodoc] from dda import symbols
[autodoc] import dda => <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>
[autodoc] getattr(_, 'symbols')
[autodoc] => <function symbols at 0x7f2acb2cda60>
[autodoc] from dda import is_symbol
[autodoc] import dda => <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>
[autodoc] getattr(_, 'is_symbol')
[autodoc] => <function is_symbol at 0x7f2acb2cd310>
[autodoc] from dda import to_sympy
[autodoc] import dda => <module 'dda' from '/home/sven/Analog/Forschungsauftrag/dda/dda/__init__.py'>
[autodoc] getattr(_, 'to_sympy')
[autodoc] => <function to_sympy at 0x7f2acb2d6820>
[autodoc] output:

.. py:module:: dda

PyDDA is a small library to write and generate DDA code in Python.
DDA stands for *digital differential analyzer*. In this context, it is
a code for solving ordinary differential equations given in a domain
specific language description (i.e. an electrical circuit).

The main advantage of this implementation in contrast to the older Perl
implementation is the *abstract syntax tree* level of circuit representation.
The syntax tree representation allows for fine-grained manipulations of
terms where the older Perl code could only apply regular expressions.

This code can replace the old ``dda2c.pl`` Perl implementation. It is a
standalone Python 3 code with no third party dependencies. It generates
standalone C++ code with no dependencies (not even on the old ``dda.h``).

Usage: As a library or from the command line
--------------------------------------------

This module can either be used from a DDA file written in Python or 
directly from old-style traditional DDA plaintext files. While pythonic
dda files have the advantage to be able to use all the flexibility of
Python scripting (such as using numpy for linear algebra computations
and matplotlib for postprocessing of results), plaintext DDA files are
in general shorter and more precise to read. See :mod:`dda.dsl` for further
details on the *traditional* DDA file format.

The module can also be used from the command line as a utility. The
behaviour is similar to the ``simulate.pl`` and ``dda2c.pl`` utilities but also
covers a few more features. Usage example:

::

    me@localhost $ python -m dda --help
    usage: dda.py [-h] [-o [OUTPUT]] [circuit_file] {c,dda,dot,latex}

    PyDDA, the AST-based DDA compiler

    positional arguments:
    circuit_file          DDA setup (traditional file). Default is stdin.
    {c,dda,dot,latex}     File formats which can be generated

    optional arguments:
    -h, --help            show this help message and exit
    -o [OUTPUT], --output [OUTPUT]
                            Where to write exported code to. Default is stdout.

    A Command Line Interface (CLI) for PyDDA...

See :meth:`dsl.cli()` for the implementation/further details.

Known Bugs and limitations
--------------------------

Please see the issue list at https://lab.analogparadigm.com/koeppel/dda/-/issues/
for a list of bugs.


.. py:function:: export(state, to, **kw)
   :module: dda

   Convenience function to export (transform) a state to some other
   programming language.

   Possible formats (allowed values for ``to``) supported so far are:

   * C/C++ (via :py:mod:`dda.cpp_exporter`)
   * DDA   (via :py:mod:`dda.dsl`)
   * SymPy (via :py:mod:`dda.sympy`)
   * Latex (via :py:mod:`dda.sympy`)

   This function shall be nice, so it accepts many spelling/notation
   of these language names.

   The return value are typically strings or tuples, dicts. There should
   be no side effects.

[app] emitting event: 'object-description-transform'('py', 'function', <desc_content: <paragraph...><paragraph...><bullet_list...><paragraph.. ...>)
[app] emitting event: 'doctree-read'(<document: <target...><section "the pydda package; intro"...>>,)
[app] emitting event: 'viewcode-follow-imported'('dda', 'export')
[app] emitting event: 'viewcode-find-source'('dda',)
reading sources... [ 92%] rationale
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'rationale')
[app] emitting event: 'source-read'('rationale', ['.. _rationale:\n\nA rationale about DDA\n=====================\n\nThe first DDA code
[app] emitting event: 'doctree-read'(<document: <target...><section "a rationale about dda; rationale"...>>,)
reading sources... [100%] tips
[app] emitting event: 'env-purge-doc'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, 'tips')
[app] emitting event: 'source-read'('tips', [".. _tips:\n\nSome general recommendations in the Python ecosystem\n======================
[app] emitting event: 'doctree-read'(<document: <target...><section "some general recommendations in the ...>,)

[app] emitting event: 'env-updated'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>,)
looking for now-outdated files... [app] emitting event: 'env-get-updated'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>,)
none found
pickling environment... erledigt
checking consistency... [app] emitting event: 'env-check-consistency'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>,)
erledigt
docnames to write: ast, cas, code-testing, computing_elements, cpp-codegen, dsl, fpaa, hycon, hycon-networking, index, installation, intro, rationale, tips
preparing documents... erledigt
writing output... [  7%] ast
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <#text: 'None.  Upda
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'doctree-resolved'(<document: <target...><section "abstract syntax tree; abstract-synt ...>, 'ast')
[app] emitting event: 'html-page-context'('ast', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'last_upd
writing output... [ 14%] cas
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'doctree-resolved'(<document: <target...><section "computer algebra interfaces; cas"...>>, 'cas')
[app] emitting event: 'html-page-context'('cas', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'last_upd
writing output... [ 21%] code-testing
[app] emitting event: 'doctree-resolved'(<document: <target...><section "software testing in pyanalog; code- ...>, 'code-testing')
[app] emitting event: 'html-page-context'('code-testing', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 
writing output... [ 28%] computing_elements
[app] emitting event: 'doctree-resolved'(<document: <target...><section "dda computing elements; computing_e ...>, 'computing_elements')
[app] emitting event: 'html-page-context'('computing_elements', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version'
writing output... [ 35%] cpp-codegen
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'doctree-resolved'(<document: <target...><section "dda c++ code generator; cpp-codegen ...>, 'cpp-codegen')
[app] emitting event: 'html-page-context'('cpp-codegen', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', '
writing output... [ 42%] dsl
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'doctree-resolved'(<document: <target...><section "the dda domain specific language; d ...>, 'dsl')
[app] emitting event: 'html-page-context'('dsl', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'last_upd
writing output... [ 50%] fpaa
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'doctree-resolved'(<document: <target...><section "about fpaa; fpaa"...>>, 'fpaa')
[app] emitting event: 'html-page-context'('fpaa', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'last_up
writing output... [ 57%] hycon
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'doctree-resolved'(<document: <target...><section "about hycon; hycon"...>>, 'hycon')
[app] emitting event: 'html-page-context'('hycon', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'last_u
writing output... [ 64%] hycon-networking
[app] emitting event: 'doctree-resolved'(<document: <target...><section "hycon serial (usb/rs-232) over tcp/ ...>, 'hycon-networking')
[app] emitting event: 'html-page-context'('hycon-networking', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': 
writing output... [ 71%] index
[app] emitting event: 'doctree-resolved'(<document: <section "pyanalog: a pythonic analog computer demonstra ...>, 'index')
[app] emitting event: 'html-page-context'('index', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'last_u
writing output... [ 78%] installation
[app] emitting event: 'doctree-resolved'(<document: <target...><section "obtaining and installing pyanalog;  ...>, 'installation')
[app] emitting event: 'html-page-context'('installation', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 
writing output... [ 85%] intro
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <literal...>>, <lite
[app] emitting event: 'missing-reference'(<sphinx.environment.BuildEnvironment object at 0x7f2acbd1ff40>, <pending_xref: <inline...>>, <inlin
[app] emitting event: 'doctree-resolved'(<document: <target...><section "the pydda package; intro"...>>, 'intro')
[app] emitting event: 'html-page-context'('intro', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'last_u
writing output... [ 92%] rationale
[app] emitting event: 'doctree-resolved'(<document: <target...><section "a rationale about dda; rationale"...>>, 'rationale')
[app] emitting event: 'html-page-context'('rationale', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'la
writing output... [100%] tips
[app] emitting event: 'doctree-resolved'(<document: <target...><section "some general recommendations in the ...>, 'tips')
[app] emitting event: 'html-page-context'('tips', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'last_up

generating indices...  genindex[app] emitting event: 'html-page-context'('genindex', 'genindex.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 
 py-modindex[app] emitting event: 'html-page-context'('py-modindex', 'domainindex.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version'
erledigt
[app] emitting event: 'html-collect-pages'()
highlighting module code... [ 14%] dda
[app] emitting event: 'html-page-context'('_modules/dda', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 
highlighting module code... [ 28%] dda.ast
[app] emitting event: 'html-page-context'('_modules/dda/ast', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': 
highlighting module code... [ 42%] dda.cpp_exporter
[app] emitting event: 'html-page-context'('_modules/dda/cpp_exporter', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'v
highlighting module code... [ 57%] dda.dsl
[app] emitting event: 'html-page-context'('_modules/dda/dsl', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': 
highlighting module code... [ 71%] dda.sympy
[app] emitting event: 'html-page-context'('_modules/dda/sympy', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version'
highlighting module code... [ 85%] fpaa.fpaa
[app] emitting event: 'html-page-context'('_modules/fpaa/fpaa', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version'
highlighting module code... [100%] hycon.HyCon
[app] emitting event: 'html-page-context'('_modules/hycon/HyCon', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'versio

[app] emitting event: 'html-page-context'('_modules/index', 'page.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': ''
writing additional pages...  search[app] emitting event: 'html-page-context'('search', 'search.html', {'embedded': False, 'project': 'PyDDA', 'release': '', 'version': '', 'las
erledigt
copying static files... ... erledigt
copying extra files... erledigt
dumping search index in English (code: en)... erledigt
dumping object inventory... erledigt
build abgeschlossen, 3 warnings.

The HTML pages are in _build/html.
[app] emitting event: 'build-finished'(None,)
